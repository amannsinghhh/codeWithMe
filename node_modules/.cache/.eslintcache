[{"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/index.js":"1","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/reportWebVitals.js":"2","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/App.js":"3","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/pages/home.js":"4","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/pages/compiler.js":"5","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js":"6","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Client.js":"7","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/socket.js":"8","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/action.js":"9"},{"size":535,"mtime":1690569782662,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":1690569782666,"results":"12","hashOfConfig":"11"},{"size":726,"mtime":1692515999717,"results":"13","hashOfConfig":"11"},{"size":2047,"mtime":1692516238724,"results":"14","hashOfConfig":"11"},{"size":3202,"mtime":1692955821075,"results":"15","hashOfConfig":"11"},{"size":2640,"mtime":1692963515293,"results":"16","hashOfConfig":"11"},{"size":337,"mtime":1692705221968,"results":"17","hashOfConfig":"11"},{"size":347,"mtime":1692780158583,"results":"18","hashOfConfig":"11"},{"size":201,"mtime":1692708582830,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1at8omx",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/index.js",[],[],"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/reportWebVitals.js",[],[],"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/App.js",["51"],[],"import './App.css';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport Home from './pages/home';\nimport Compiler from './pages/compiler';\nimport toast, { Toaster } from 'react-hot-toast';\n\nfunction App() {\n  return (\n    <>\n      <div>\n        <Toaster\n          position=\"top-right\"\n          toastOptions={{\n            success: {\n              theme: {\n                primary: '#4aed88'\n              }\n            }\n          }}\n\n        />\n      </div>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Home />}></Route>\n          <Route path=\"/compiler/:roomId\" element={<Compiler />}></Route>\n        </Routes>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;  \n","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/pages/home.js",["52","53"],[],"import React, { useState } from 'react'\nimport { v4 as uuidV4 } from 'uuid'\nimport { useNavigate } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nconst Home = () => {\n    const navigate = useNavigate();\n    const [roomId, setRoomId] = useState('');\n    const [username, setUsername] = useState('');\n    const createNewRoom = (e) => {\n        e.preventDefault();\n        const id = uuidV4();\n        setRoomId(id);\n        toast.success('Created a new room');\n    }\n    const joinRoom = () => {\n        if (!roomId || !username) {\n            toast.error('RoomID & username required');\n            return;\n        }\n        navigate(`/compiler/${roomId}`, {\n            state: {\n                username,\n            },\n        })\n    }\n\n    const enterbutton = (e) => {\n        if (e.code === 'Enter') {\n            joinRoom();\n        }\n    }\n\n    return (\n        <div className='homepage'>\n            <div className='form'>\n                <img src='/logo1.png' className='logo' alt='logo' />\n                <h4 className='roomidlabel'>Enter the RoomId</h4>\n                <div className='inputroomid'>\n                    <input type='text' className='input' placeholder='Room ID' onChange={(e) => setRoomId(e.target.value)} value={roomId} onKeyUp={enterbutton} />\n                    <input type='text' className='input' placeholder='Username' onChange={(e) => setUsername(e.target.value)} value={username} onKeyUp={enterbutton} />\n                    <button className='btn joinbtn' onClick={joinRoom}>Join</button>\n                    <span className='createRoom'>\n                        Don't have a Room ID? Create one &nbsp;\n                        <a onClick={createNewRoom} href='' className='newroomidbtn'>New Room</a>\n                    </span>\n\n                </div>\n            </div>\n            <footer>\n                <h4>Built Simply by {''}\n                    <a href='https://github.com/amannsinghhh'>AmannSinghhh</a></h4>\n            </footer>\n\n        </div>\n    )\n}\n\nexport default Home","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/pages/compiler.js",["54","55"],[],"import React, { useState, useRef, useEffect } from 'react'\nimport Client from '../components/Client';\nimport Editor from '../components/Editor';\nimport { initSocket } from '../socket';\nimport ACTIONS from '../action';\nimport { useLocation, useNavigate, Navigate, useParams } from 'react-router-dom'\nimport { toast } from 'react-hot-toast';\nconst Compiler = () => {\n    const socket = ('http://localhost:5000');\n    const socketRef = useRef(null);\n    const location = useLocation();\n    const reactNavigator = useNavigate();\n    const { roomId } = useParams();\n    const [clients, setClients] = useState([\n\n    ]);\n\n    useEffect(() => {\n        const init = async () => {\n            socketRef.current = initSocket();\n            socketRef.current.on('connect_error', (err) => handleErrors(err));\n            socketRef.current.on('connect_failed', (err) => handleErrors(err));\n\n            function handleErrors(e) {\n                console.log('socket error', e);\n            }\n            socketRef.current.emit(ACTIONS.JOIN, {\n                roomId,\n                username: location.state?.username,\n            });\n\n            socketRef.current.on(ACTIONS.JOINED, ({ clients, username, socketId }) => {\n                if (username !== location.state?.username) {\n                    toast.success(`${username} joined the room`)\n                }\n                setClients(clients);\n            })\n            socketRef.current.on(ACTIONS.DISCONNECTED, ({ socketId }) => {\n                toast.success(`Someone left`)\n                setClients((prev) => {\n                    return prev.filter(\n                        (client) => client.socketId !== socketId\n                    );\n                })\n            })\n        };\n        init();\n        return () => {\n            socketRef.current.off(ACTIONS.JOINED);\n            socketRef.current.off(ACTIONS.DISCONNECTED);\n\n        }\n    }, []);\n\n    function leaveroom() {\n        reactNavigator('/')\n    }\n\n    async function copyroomid() {\n        try {\n            await navigator.clipboard.writeText(roomId);\n            toast.success('Room ID copied')\n        }\n        catch (err) {\n            toast.error('Not Copied')\n        }\n    }\n\n    if (!location.state) {\n        return < Navigate to=\"/\" />;\n    }\n\n    return <div className='mainblock'>\n        <div className='sidebar'>\n            <div className='innersidebar'>\n                <div className='logo'>\n                    <img src='/logo1.png' alt='logo' className='logoimg' />\n                </div>\n                <h3>Connected</h3>\n                <div className='clientsList'>\n                    {\n                        clients.map((client) => (\n                            <Client key={client.socketId} username={client.username} />\n                        ))\n                    }\n                </div>\n            </div>\n            <button className='btn copybtn' onClick={copyroomid}>Copy Room ID</button>\n            <button className='btn leavebtn' onClick={leaveroom}>Leave</button>\n        </div>\n        <div className='editorblock'>\n            <Editor socketRef={socketRef} roomId={roomId} />\n        </div>\n    </div>\n};\n\nexport default Compiler;","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js",["56","57","58","59","60","61"],[],"import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState } from '@codemirror/state';\nimport axios from \"axios\";\nimport ACTIONS from \"../action\";\n\n\nconst Editor = ({ socketRef, roomID }) => {\n    const editorRef = useRef(null);\n    const [code, setCode] = useState(\"console.log('Start Writing!');\");\n    const [output, setOutput] = useState(\"\");\n\n    const runCode = async () => {\n        try {\n            editorRef.current = setOutput(\"Running...\");\n\n            const response = await axios.post(\n                \"https://runkit.io/api/run/1.0.0\",\n                { code },\n                {\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                }\n            );\n\n            setOutput(response.data);\n        } catch (error) {\n            setOutput(\"Error: \" + error.message);\n        }\n        editorRef.current.on('change', (instance, changes) => {\n            console.log('changes', changes)\n            const { origin } = changes;\n            const code = instance.getValue();\n            if (origin !== 'setValue') {\n                socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                    roomID,\n                    code,\n                });\n            }\n            console.log();\n        })\n\n    };\n    useEffect(() => {\n        if (socketRef.current)\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue();\n                }\n            })\n    }, [socketRef.current])\n\n    return (\n        <div>\n            <CodeMirror\n                value={code}\n                height=\"650px\"\n                theme={vscodeDark}\n                options={{\n                    mode: { name: javascript(), json: true },\n                    theme: 'material',\n                    lineNumbers: true,\n                    autocompletion: true,\n                    closeBrackets: true,\n\n                }}\n                onChange={(editor, data, value) => {\n                    setCode(value);\n                }}\n            />\n            <button className=\"btn runbtn\" onClick={runCode}>Run</button>\n            <h2 className=\"outputtxt\">Output:</h2>\n            <pre>{output}</pre>\n        </div>\n    );\n};\n\nexport default Editor;\n\n","/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Client.js",[],[],"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/socket.js",[],[],"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/action.js",[],[],{"ruleId":"62","severity":1,"message":"63","line":5,"column":8,"nodeType":"64","messageId":"65","endLine":5,"endColumn":13},{"ruleId":"62","severity":1,"message":"66","line":4,"column":17,"nodeType":"64","messageId":"65","endLine":4,"endColumn":24},{"ruleId":"67","severity":1,"message":"68","line":44,"column":25,"nodeType":"69","endLine":44,"endColumn":85},{"ruleId":"62","severity":1,"message":"70","line":9,"column":11,"nodeType":"64","messageId":"65","endLine":9,"endColumn":17},{"ruleId":"71","severity":1,"message":"72","line":53,"column":8,"nodeType":"73","endLine":53,"endColumn":10,"suggestions":"74"},{"ruleId":"62","severity":1,"message":"75","line":4,"column":10,"nodeType":"64","messageId":"65","endLine":4,"endColumn":24},{"ruleId":"62","severity":1,"message":"76","line":4,"column":26,"nodeType":"64","messageId":"65","endLine":4,"endColumn":39},{"ruleId":"62","severity":1,"message":"77","line":4,"column":41,"nodeType":"64","messageId":"65","endLine":4,"endColumn":60},{"ruleId":"62","severity":1,"message":"78","line":4,"column":62,"nodeType":"64","messageId":"65","endLine":4,"endColumn":78},{"ruleId":"62","severity":1,"message":"79","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":21},{"ruleId":"71","severity":1,"message":"80","line":56,"column":8,"nodeType":"73","endLine":56,"endColumn":27,"suggestions":"81"},"no-unused-vars","'toast' is defined but never used.","Identifier","unusedVar","'Toaster' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'socket' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location.state?.username' and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["82"],"'autocompletion' is defined but never used.","'closeBrackets' is defined but never used.","'closeBracketsKeymap' is defined but never used.","'completionKeymap' is defined but never used.","'EditorState' is defined but never used.","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["83"],{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [location.state?.username, roomId]",{"range":"88","text":"89"},"Update the dependencies array to be: [socketRef]",{"range":"90","text":"91"},[1906,1908],"[location.state?.username, roomId]",[1872,1891],"[socketRef]"]