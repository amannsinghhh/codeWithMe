{"ast":null,"code":"import { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from \"@codemirror/autocomplete\";\nimport { defaultKeymap, history, historyKeymap } from \"@codemirror/commands\";\nimport { javascript } from \"@codemirror/lang-javascript\";\nimport { bracketMatching, defaultHighlightStyle, foldGutter, foldKeymap, indentOnInput, syntaxHighlighting } from \"@codemirror/language\";\nimport { lintKeymap } from \"@codemirror/lint\";\nimport { highlightSelectionMatches, searchKeymap } from \"@codemirror/search\";\nimport { EditorState } from \"@codemirror/state\";\nimport { crosshairCursor, drawSelection, dropCursor, EditorView, highlightActiveLine, highlightActiveLineGutter, highlightSpecialChars, keymap, lineNumbers, rectangularSelection } from \"@codemirror/view\";\nconst initialText = 'console.log(\"hello, world\")';\nconst targetElement = document.querySelector(\"#editor\");\nnew EditorView({\n  parent: targetElement,\n  state: EditorState.create({\n    doc: initialText,\n    extensions: [lineNumbers(), highlightActiveLineGutter(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), dropCursor(), EditorState.allowMultipleSelections.of(true), indentOnInput(), syntaxHighlighting(defaultHighlightStyle, {\n      fallback: true\n    }), bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), crosshairCursor(), highlightActiveLine(), highlightSelectionMatches(), keymap.of([...closeBracketsKeymap, ...defaultKeymap, ...searchKeymap, ...historyKeymap, ...foldKeymap, ...completionKeymap, ...lintKeymap]), javascript()]\n  })\n});","map":{"version":3,"names":["autocompletion","closeBrackets","closeBracketsKeymap","completionKeymap","defaultKeymap","history","historyKeymap","javascript","bracketMatching","defaultHighlightStyle","foldGutter","foldKeymap","indentOnInput","syntaxHighlighting","lintKeymap","highlightSelectionMatches","searchKeymap","EditorState","crosshairCursor","drawSelection","dropCursor","EditorView","highlightActiveLine","highlightActiveLineGutter","highlightSpecialChars","keymap","lineNumbers","rectangularSelection","initialText","targetElement","document","querySelector","parent","state","create","doc","extensions","allowMultipleSelections","of","fallback"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js"],"sourcesContent":["import {\n    autocompletion,\n    closeBrackets,\n    closeBracketsKeymap,\n    completionKeymap\n} from \"@codemirror/autocomplete\"\nimport { defaultKeymap, history, historyKeymap } from \"@codemirror/commands\"\nimport { javascript } from \"@codemirror/lang-javascript\"\nimport {\n    bracketMatching,\n    defaultHighlightStyle,\n    foldGutter,\n    foldKeymap,\n    indentOnInput,\n    syntaxHighlighting\n} from \"@codemirror/language\"\nimport { lintKeymap } from \"@codemirror/lint\"\nimport { highlightSelectionMatches, searchKeymap } from \"@codemirror/search\"\nimport { EditorState } from \"@codemirror/state\"\nimport {\n    crosshairCursor,\n    drawSelection,\n    dropCursor,\n    EditorView,\n    highlightActiveLine,\n    highlightActiveLineGutter,\n    highlightSpecialChars,\n    keymap,\n    lineNumbers,\n    rectangularSelection\n} from \"@codemirror/view\"\n\nconst initialText = 'console.log(\"hello, world\")'\nconst targetElement = document.querySelector(\"#editor\")\n\nnew EditorView({\n    parent: targetElement,\n    state: EditorState.create({\n        doc: initialText,\n        extensions: [\n            lineNumbers(),\n            highlightActiveLineGutter(),\n            highlightSpecialChars(),\n            history(),\n            foldGutter(),\n            drawSelection(),\n            dropCursor(),\n            EditorState.allowMultipleSelections.of(true),\n            indentOnInput(),\n            syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n            bracketMatching(),\n            closeBrackets(),\n            autocompletion(),\n            rectangularSelection(),\n            crosshairCursor(),\n            highlightActiveLine(),\n            highlightSelectionMatches(),\n            keymap.of([\n                ...closeBracketsKeymap,\n                ...defaultKeymap,\n                ...searchKeymap,\n                ...historyKeymap,\n                ...foldKeymap,\n                ...completionKeymap,\n                ...lintKeymap\n            ]),\n            javascript()\n        ]\n    })\n})\n"],"mappings":"AAAA,SACIA,cAAc,EACdC,aAAa,EACbC,mBAAmB,EACnBC,gBAAgB,QACb,0BAA0B;AACjC,SAASC,aAAa,EAAEC,OAAO,EAAEC,aAAa,QAAQ,sBAAsB;AAC5E,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SACIC,eAAe,EACfC,qBAAqB,EACrBC,UAAU,EACVC,UAAU,EACVC,aAAa,EACbC,kBAAkB,QACf,sBAAsB;AAC7B,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,yBAAyB,EAAEC,YAAY,QAAQ,oBAAoB;AAC5E,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SACIC,eAAe,EACfC,aAAa,EACbC,UAAU,EACVC,UAAU,EACVC,mBAAmB,EACnBC,yBAAyB,EACzBC,qBAAqB,EACrBC,MAAM,EACNC,WAAW,EACXC,oBAAoB,QACjB,kBAAkB;AAEzB,MAAMC,WAAW,GAAG,6BAA6B;AACjD,MAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,SAAS,CAAC;AAEvD,IAAIV,UAAU,CAAC;EACXW,MAAM,EAAEH,aAAa;EACrBI,KAAK,EAAEhB,WAAW,CAACiB,MAAM,CAAC;IACtBC,GAAG,EAAEP,WAAW;IAChBQ,UAAU,EAAE,CACRV,WAAW,CAAC,CAAC,EACbH,yBAAyB,CAAC,CAAC,EAC3BC,qBAAqB,CAAC,CAAC,EACvBnB,OAAO,CAAC,CAAC,EACTK,UAAU,CAAC,CAAC,EACZS,aAAa,CAAC,CAAC,EACfC,UAAU,CAAC,CAAC,EACZH,WAAW,CAACoB,uBAAuB,CAACC,EAAE,CAAC,IAAI,CAAC,EAC5C1B,aAAa,CAAC,CAAC,EACfC,kBAAkB,CAACJ,qBAAqB,EAAE;MAAE8B,QAAQ,EAAE;IAAK,CAAC,CAAC,EAC7D/B,eAAe,CAAC,CAAC,EACjBP,aAAa,CAAC,CAAC,EACfD,cAAc,CAAC,CAAC,EAChB2B,oBAAoB,CAAC,CAAC,EACtBT,eAAe,CAAC,CAAC,EACjBI,mBAAmB,CAAC,CAAC,EACrBP,yBAAyB,CAAC,CAAC,EAC3BU,MAAM,CAACa,EAAE,CAAC,CACN,GAAGpC,mBAAmB,EACtB,GAAGE,aAAa,EAChB,GAAGY,YAAY,EACf,GAAGV,aAAa,EAChB,GAAGK,UAAU,EACb,GAAGR,gBAAgB,EACnB,GAAGW,UAAU,CAChB,CAAC,EACFP,UAAU,CAAC,CAAC;EAEpB,CAAC;AACL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}