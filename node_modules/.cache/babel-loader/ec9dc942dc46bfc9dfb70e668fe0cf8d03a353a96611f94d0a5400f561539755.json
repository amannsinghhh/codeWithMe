{"ast":null,"code":"var _jsxFileName = \"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js\";\nimport React from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = () => {\n  const code = \"console.log('Start Writing!');\";\n  const editorState = EditorState.create({\n    extensions: [javascript(),\n    // Language mode\n    keymap.of([closeBrackets(), completionKeymap()]) // Close brackets and autocompletion keymaps\n    ]\n  });\n\n  const handleCodeChange = (editor, data, value) => {};\n  return /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: code,\n    height: \"700px\",\n    theme: vscodeDark,\n    options: {\n      mode: 'javascript',\n      theme: 'material',\n      lineNumbers: true,\n      autoCloseBrackets: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_c = Editor;\nexport default Editor;\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { lineNumbers, EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { basicSetup } from 'codemirror'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nconst Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('#realtimeeditor')\n    const extensions = [lineNumbers(),\n    highlightActiveLineGutter(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    dropCursor(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    crosshairCursor(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...completionKeymap,\n        ...lintKeymap,\n    ]),\n    javascript(),]\n    new EditorView({\n        parent: targetElement,\n        state: EditorState.create({\n            doc: initialText, extensions\n        }),\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n\n\nexport default Editor\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","CodeMirror","autocompletion","closeBrackets","closeBracketsKeymap","completionKeymap","vscodeDark","javascript","EditorState","keymap","jsxDEV","_jsxDEV","Editor","code","editorState","create","extensions","of","handleCodeChange","editor","data","value","height","theme","options","mode","lineNumbers","autoCloseBrackets","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js"],"sourcesContent":["import React from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\n\n\n\nconst Editor = () => {\n    const code = \"console.log('Start Writing!');\"\n    const editorState = EditorState.create({\n        extensions: [\n            javascript(), // Language mode\n            keymap.of([closeBrackets(), completionKeymap()]), // Close brackets and autocompletion keymaps\n        ],\n    });\n\n    const handleCodeChange = (editor, data, value) => {\n    };\n    return (\n        <CodeMirror\n            value={code}\n            height=\"700px\"\n            theme={vscodeDark}\n            options={{\n                mode: 'javascript',\n                theme: 'material',\n                lineNumbers: true,\n                autoCloseBrackets: true,\n            }}\n        />\n    );\n}\nexport default Editor;\n\n\n\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { lineNumbers, EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { basicSetup } from 'codemirror'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nconst Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('#realtimeeditor')\n    const extensions = [lineNumbers(),\n    highlightActiveLineGutter(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    dropCursor(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    crosshairCursor(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...completionKeymap,\n        ...lintKeymap,\n    ]),\n    javascript(),]\n    new EditorView({\n        parent: targetElement,\n        state: EditorState.create({\n            doc: initialText, extensions\n        }),\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n\n\nexport default Editor\n\n\n*/"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,SAASC,cAAc,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,0BAA0B;AAC/G,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAI1C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACjB,MAAMC,IAAI,GAAG,gCAAgC;EAC7C,MAAMC,WAAW,GAAGN,WAAW,CAACO,MAAM,CAAC;IACnCC,UAAU,EAAE,CACRT,UAAU,CAAC,CAAC;IAAE;IACdE,MAAM,CAACQ,EAAE,CAAC,CAACd,aAAa,CAAC,CAAC,EAAEE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAE;IAAA;EAE1D,CAAC,CAAC;;EAEF,MAAMa,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,KAAK,CAClD,CAAC;EACD,oBACIV,OAAA,CAACV,UAAU;IACPoB,KAAK,EAAER,IAAK;IACZS,MAAM,EAAC,OAAO;IACdC,KAAK,EAAEjB,UAAW;IAClBkB,OAAO,EAAE;MACLC,IAAI,EAAE,YAAY;MAClBF,KAAK,EAAE,UAAU;MACjBG,WAAW,EAAE,IAAI;MACjBC,iBAAiB,EAAE;IACvB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAC,EAAA,GAxBKpB,MAAM;AAyBZ,eAAeA,MAAM;;AAKrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}