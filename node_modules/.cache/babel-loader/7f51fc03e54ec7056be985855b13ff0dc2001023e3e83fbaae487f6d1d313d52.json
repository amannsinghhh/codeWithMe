{"ast":null,"code":"var _jsxFileName = \"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState, basicSetup } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = () => {\n  _s();\n  const initialCode = \"console.log('Start Writing!');\";\n\n  // Use the useState hook to manage the code state\n  const [code, setCode] = useState(initialCode);\n  const editorState = EditorState.create({\n    doc: initialCode,\n    extensions: [basicSetup, javascript(),\n    // Language mode\n    keymap.of([closeBrackets(), completionKeymap()]) // Close brackets and autocompletion keymaps\n    ]\n  });\n\n  const handleCodeChange = (editor, data, value) => {\n    setCode(value); // Update the code state\n  };\n\n  return /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: code,\n    height: \"700px\",\n    theme: vscodeDark,\n    onChange: handleCodeChange // Use the correct onChange event handler\n    ,\n    options: {\n      mode: 'javascript',\n      theme: 'material',\n      lineNumbers: true,\n      autoCloseBrackets: true\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(Editor, \"ZFV6bPVogXq7gKF6tM763Q/dBFY=\");\n_c = Editor;\nexport default Editor;\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { lineNumbers, EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { basicSetup } from 'codemirror'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nconst Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('#realtimeeditor')\n    const extensions = [lineNumbers(),\n    highlightActiveLineGutter(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    dropCursor(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    crosshairCursor(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...completionKeymap,\n        ...lintKeymap,\n    ]),\n    javascript(),]\n    new EditorView({\n        parent: targetElement,\n        state: EditorState.create({\n            doc: initialText, extensions\n        }),\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n\n\nexport default Editor\n\n\n*/\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useState","CodeMirror","autocompletion","closeBrackets","closeBracketsKeymap","completionKeymap","vscodeDark","javascript","EditorState","basicSetup","keymap","jsxDEV","_jsxDEV","Editor","_s","initialCode","code","setCode","editorState","create","doc","extensions","of","handleCodeChange","editor","data","value","height","theme","onChange","options","mode","lineNumbers","autoCloseBrackets","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState, basicSetup } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\n\nconst Editor = () => {\n    const initialCode = \"console.log('Start Writing!');\";\n\n    // Use the useState hook to manage the code state\n    const [code, setCode] = useState(initialCode);\n\n    const editorState = EditorState.create({\n        doc: initialCode,\n        extensions: [\n            basicSetup,\n            javascript(), // Language mode\n            keymap.of([closeBrackets(), completionKeymap()]), // Close brackets and autocompletion keymaps\n        ],\n    });\n\n    const handleCodeChange = (editor, data, value) => {\n        setCode(value); // Update the code state\n    };\n\n    return (\n        <CodeMirror\n            value={code}\n            height=\"700px\"\n            theme={vscodeDark}\n            onChange={handleCodeChange} // Use the correct onChange event handler\n            options={{\n                mode: 'javascript',\n                theme: 'material',\n                lineNumbers: true,\n                autoCloseBrackets: true,\n            }}\n        />\n    );\n}\nexport default Editor;\n\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { lineNumbers, EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { basicSetup } from 'codemirror'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nconst Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('#realtimeeditor')\n    const extensions = [lineNumbers(),\n    highlightActiveLineGutter(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    dropCursor(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    crosshairCursor(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...completionKeymap,\n        ...lintKeymap,\n    ]),\n    javascript(),]\n    new EditorView({\n        parent: targetElement,\n        state: EditorState.create({\n            doc: initialText, extensions\n        }),\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n\n\nexport default Editor\n\n\n*/"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,SAASC,cAAc,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,0BAA0B;AAC/G,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,WAAW,EAAEC,UAAU,QAAQ,mBAAmB;AAC3D,SAASC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,WAAW,GAAG,gCAAgC;;EAEpD;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGjB,QAAQ,CAACe,WAAW,CAAC;EAE7C,MAAMG,WAAW,GAAGV,WAAW,CAACW,MAAM,CAAC;IACnCC,GAAG,EAAEL,WAAW;IAChBM,UAAU,EAAE,CACRZ,UAAU,EACVF,UAAU,CAAC,CAAC;IAAE;IACdG,MAAM,CAACY,EAAE,CAAC,CAACnB,aAAa,CAAC,CAAC,EAAEE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAE;IAAA;EAE1D,CAAC,CAAC;;EAEF,MAAMkB,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAEC,KAAK,KAAK;IAC9CT,OAAO,CAACS,KAAK,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED,oBACId,OAAA,CAACX,UAAU;IACPyB,KAAK,EAAEV,IAAK;IACZW,MAAM,EAAC,OAAO;IACdC,KAAK,EAAEtB,UAAW;IAClBuB,QAAQ,EAAEN,gBAAiB,CAAC;IAAA;IAC5BO,OAAO,EAAE;MACLC,IAAI,EAAE,YAAY;MAClBH,KAAK,EAAE,UAAU;MACjBI,WAAW,EAAE,IAAI;MACjBC,iBAAiB,EAAE;IACvB;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAAvB,EAAA,CAjCKD,MAAM;AAAAyB,EAAA,GAANzB,MAAM;AAkCZ,eAAeA,MAAM;;AAGrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5DA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}