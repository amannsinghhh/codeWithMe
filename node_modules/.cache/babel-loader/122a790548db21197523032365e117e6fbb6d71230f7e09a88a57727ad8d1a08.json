{"ast":null,"code":"var _jsxFileName = \"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { lineNumbers, EditorView, keymap, highlightActiveLine } from '@codemirror/view';\nimport { defaultKeymap } from '@codemirror/commands';\nimport { history, historyKeymap } from '@codemirror/history';\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language';\nimport { bracketMatching } from '@codemirror/matchbrackets';\nimport { highlightActiveLineGutter } from '@codemirror/gutter';\nimport { defaultHighlightStyle } from '@codemirror/highlight';\nimport { javascript } from '@codemirror/lang-javascript';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { lintKeymap } from '@codemirror/lint';\nimport { basicSetup } from 'codemirror';\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = () => {\n  const initialText = 'console.log(\"hello, world\")';\n  const targetElement = document.querySelector('#realtimeeditor');\n  const extensions = [lineNumbers(), highlightActiveLineGutter(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), dropCursor(), EditorState.allowMultipleSelections.of(true), indentOnInput(), syntaxHighlighting(defaultHighlightStyle, {\n    fallback: true\n  }), bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), crosshairCursor(), highlightActiveLine(), highlightSelectionMatches(), keymap.of([...closeBracketsKeymap, ...defaultKeymap, ...searchKeymap, ...historyKeymap, ...foldKeymap, ...completionKeymap, ...lintKeymap]), javascript()];\n  new EditorView({\n    parent: targetElement,\n    state: EditorState.create({\n      doc: initialText,\n      extensions\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: \"realtimeeditor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n};\n_c = Editor;\nexport default Editor;\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport CodeMirror from 'codemirror'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { basicSetup, minimalSetup } from \"codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nimport { Type } from 'react'\nimport { func } from 'prop-types'\n\nconst initialText = 'console.log(\"hello, world\")'\nconst targetElement = document.querySelector('#realtimeeditor')\nnew EditorView({\n    parent: targetElement,\n    state: EditorState.create({\n        doc: initialText,\n        extensions: [\n            lineNumbers(),\n            highlightActiveLineGutter(),\n            highlightSpecialChars(),\n            history(),\n            foldGutter(),\n            drawSelection(),\n            dropCursor(),\n            EditorState.allowMultipleSelections.of(true),\n            indentOnInput(),\n            syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n            bracketMatching(),\n            closeBrackets(),\n            autocompletion(),\n            rectangularSelection(),\n            crosshairCursor(),\n            highlightActiveLine(),\n            highlightSelectionMatches(),\n            keymap.of([\n                ...closeBracketsKeymap,\n                ...defaultKeymap,\n                ...searchKeymap,\n                ...historyKeymap,\n                ...foldKeymap,\n                ...completionKeymap,\n                ...lintKeymap,\n            ]),\n            javascript(),\n        ],\n    }),\n})\n\n\nexport default Editor\n\n\n\n\n\n/*\nuseEffect(() => {\n        async function init() {\n            let myView = new EditorView(document.getElementById('realtimeeditor'), {\n                doc: \"hello\",\n                extensions: [keymap.of(defaultKeymap)],\n                parent: document.body,\n                mode: { name: 'javascript', json: true },\n                theme: 'dracula',\n                autoCloseTags: true,\n                autoCloseBracket: true,\n                lineNumbers: true,\n            })\n\n        }\n        init();\n    }, []);\n    \n    const Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('realtimeeditor')\n    new EditorView({\n        doc: initialText,\n        extensions: [\n            basicSetup,\n            javascript(),\n        ],\n        parent: targetElement,\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n*/\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useState","useRef","EditorState","lineNumbers","EditorView","keymap","highlightActiveLine","defaultKeymap","history","historyKeymap","indentOnInput","foldGutter","foldKeymap","syntaxHighlighting","bracketMatching","highlightActiveLineGutter","defaultHighlightStyle","javascript","highlightSelectionMatches","searchKeymap","autocompletion","closeBrackets","closeBracketsKeymap","completionKeymap","lintKeymap","basicSetup","crosshairCursor","drawSelection","dropCursor","highlightSpecialChars","rectangularSelection","jsxDEV","_jsxDEV","Editor","initialText","targetElement","document","querySelector","extensions","allowMultipleSelections","of","fallback","parent","state","create","doc","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { lineNumbers, EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { basicSetup } from 'codemirror'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nconst Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('#realtimeeditor')\n    const extensions = [lineNumbers(),\n    highlightActiveLineGutter(),\n    highlightSpecialChars(),\n    history(),\n    foldGutter(),\n    drawSelection(),\n    dropCursor(),\n    EditorState.allowMultipleSelections.of(true),\n    indentOnInput(),\n    syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n    bracketMatching(),\n    closeBrackets(),\n    autocompletion(),\n    rectangularSelection(),\n    crosshairCursor(),\n    highlightActiveLine(),\n    highlightSelectionMatches(),\n    keymap.of([\n        ...closeBracketsKeymap,\n        ...defaultKeymap,\n        ...searchKeymap,\n        ...historyKeymap,\n        ...foldKeymap,\n        ...completionKeymap,\n        ...lintKeymap,\n    ]),\n    javascript(),]\n    new EditorView({\n        parent: targetElement,\n        state: EditorState.create({\n            doc: initialText, extensions\n        }),\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n\n\nexport default Editor\n\n\n\n\n\n\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport CodeMirror from 'codemirror'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { basicSetup, minimalSetup } from \"codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nimport { Type } from 'react'\nimport { func } from 'prop-types'\n\nconst initialText = 'console.log(\"hello, world\")'\nconst targetElement = document.querySelector('#realtimeeditor')\nnew EditorView({\n    parent: targetElement,\n    state: EditorState.create({\n        doc: initialText,\n        extensions: [\n            lineNumbers(),\n            highlightActiveLineGutter(),\n            highlightSpecialChars(),\n            history(),\n            foldGutter(),\n            drawSelection(),\n            dropCursor(),\n            EditorState.allowMultipleSelections.of(true),\n            indentOnInput(),\n            syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n            bracketMatching(),\n            closeBrackets(),\n            autocompletion(),\n            rectangularSelection(),\n            crosshairCursor(),\n            highlightActiveLine(),\n            highlightSelectionMatches(),\n            keymap.of([\n                ...closeBracketsKeymap,\n                ...defaultKeymap,\n                ...searchKeymap,\n                ...historyKeymap,\n                ...foldKeymap,\n                ...completionKeymap,\n                ...lintKeymap,\n            ]),\n            javascript(),\n        ],\n    }),\n})\n\n\nexport default Editor\n\n\n\n\n\n/*\nuseEffect(() => {\n        async function init() {\n            let myView = new EditorView(document.getElementById('realtimeeditor'), {\n                doc: \"hello\",\n                extensions: [keymap.of(defaultKeymap)],\n                parent: document.body,\n                mode: { name: 'javascript', json: true },\n                theme: 'dracula',\n                autoCloseTags: true,\n                autoCloseBracket: true,\n                lineNumbers: true,\n            })\n\n        }\n        init();\n    }, []);\n    \n    const Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('realtimeeditor')\n    new EditorView({\n        doc: initialText,\n        extensions: [\n            basicSetup,\n            javascript(),\n        ],\n        parent: targetElement,\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n*/"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,WAAW,EAAEC,UAAU,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,kBAAkB;AACvF,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,OAAO,EAAEC,aAAa,QAAQ,qBAAqB;AAC5D,SAASC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,kBAAkB,QAAQ,sBAAsB;AAChG,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,yBAAyB,QAAQ,oBAAoB;AAC9D,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,yBAAyB,EAAEC,YAAY,QAAQ,oBAAoB;AAC5E,SAASC,cAAc,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,0BAA0B;AAC/G,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,UAAU,QAAQ,YAAY;AACvC,SAASC,eAAe,EAAEC,aAAa,EAAEC,UAAU,EAAEC,qBAAqB,EAAEC,oBAAoB,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1H,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACjB,MAAMC,WAAW,GAAG,6BAA6B;EACjD,MAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;EAC/D,MAAMC,UAAU,GAAG,CAACnC,WAAW,CAAC,CAAC,EACjCY,yBAAyB,CAAC,CAAC,EAC3Bc,qBAAqB,CAAC,CAAC,EACvBrB,OAAO,CAAC,CAAC,EACTG,UAAU,CAAC,CAAC,EACZgB,aAAa,CAAC,CAAC,EACfC,UAAU,CAAC,CAAC,EACZ1B,WAAW,CAACqC,uBAAuB,CAACC,EAAE,CAAC,IAAI,CAAC,EAC5C9B,aAAa,CAAC,CAAC,EACfG,kBAAkB,CAACG,qBAAqB,EAAE;IAAEyB,QAAQ,EAAE;EAAK,CAAC,CAAC,EAC7D3B,eAAe,CAAC,CAAC,EACjBO,aAAa,CAAC,CAAC,EACfD,cAAc,CAAC,CAAC,EAChBU,oBAAoB,CAAC,CAAC,EACtBJ,eAAe,CAAC,CAAC,EACjBpB,mBAAmB,CAAC,CAAC,EACrBY,yBAAyB,CAAC,CAAC,EAC3Bb,MAAM,CAACmC,EAAE,CAAC,CACN,GAAGlB,mBAAmB,EACtB,GAAGf,aAAa,EAChB,GAAGY,YAAY,EACf,GAAGV,aAAa,EAChB,GAAGG,UAAU,EACb,GAAGW,gBAAgB,EACnB,GAAGC,UAAU,CAChB,CAAC,EACFP,UAAU,CAAC,CAAC,CAAE;EACd,IAAIb,UAAU,CAAC;IACXsC,MAAM,EAAEP,aAAa;IACrBQ,KAAK,EAAEzC,WAAW,CAAC0C,MAAM,CAAC;MACtBC,GAAG,EAAEX,WAAW;MAAEI;IACtB,CAAC;EACL,CAAC,CAAC;EACF,oBAAON,OAAA;IAAUc,EAAE,EAAC;EAAgB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAW,CAAC;AACpD,CAAC;AAAAC,EAAA,GArCKlB,MAAM;AAwCZ,eAAeA,MAAM;;AAQrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjGA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}