{"ast":null,"code":"import { parser } from '@lezer/cpp';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer C++\nparser](https://github.com/lezer-parser/cpp), extended with\nhighlighting and indentation information.\n*/\nconst cppLanguage = /*@__PURE__*/LRLanguage.define({\n  name: \"cpp\",\n  parser: /*@__PURE__*/parser.configure({\n    props: [/*@__PURE__*/indentNodeProp.add({\n      IfStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|else\\b)/\n      }),\n      TryStatement: /*@__PURE__*/continuedIndent({\n        except: /^\\s*({|catch)\\b/\n      }),\n      LabeledStatement: flatIndent,\n      CaseStatement: context => context.baseIndent + context.unit,\n      BlockComment: () => null,\n      CompoundStatement: /*@__PURE__*/delimitedIndent({\n        closing: \"}\"\n      }),\n      Statement: /*@__PURE__*/continuedIndent({\n        except: /^{/\n      })\n    }), /*@__PURE__*/foldNodeProp.add({\n      \"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList\": foldInside,\n      BlockComment(tree) {\n        return {\n          from: tree.from + 2,\n          to: tree.to - 2\n        };\n      }\n    })]\n  }),\n  languageData: {\n    commentTokens: {\n      line: \"//\",\n      block: {\n        open: \"/*\",\n        close: \"*/\"\n      }\n    },\n    indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/,\n    closeBrackets: {\n      stringPrefixes: [\"L\", \"u\", \"U\", \"u8\", \"LR\", \"UR\", \"uR\", \"u8R\", \"R\"]\n    }\n  }\n});\n/**\nLanguage support for C++.\n*/\nfunction cpp() {\n  return new LanguageSupport(cppLanguage);\n}\nexport { cpp, cppLanguage };","map":{"version":3,"names":["parser","LRLanguage","indentNodeProp","continuedIndent","flatIndent","delimitedIndent","foldNodeProp","foldInside","LanguageSupport","cppLanguage","define","name","configure","props","add","IfStatement","except","TryStatement","LabeledStatement","CaseStatement","context","baseIndent","unit","BlockComment","CompoundStatement","closing","Statement","tree","from","to","languageData","commentTokens","line","block","open","close","indentOnInput","closeBrackets","stringPrefixes","cpp"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/node_modules/@codemirror/lang-cpp/dist/index.js"],"sourcesContent":["import { parser } from '@lezer/cpp';\nimport { LRLanguage, indentNodeProp, continuedIndent, flatIndent, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';\n\n/**\nA language provider based on the [Lezer C++\nparser](https://github.com/lezer-parser/cpp), extended with\nhighlighting and indentation information.\n*/\nconst cppLanguage = /*@__PURE__*/LRLanguage.define({\n    name: \"cpp\",\n    parser: /*@__PURE__*/parser.configure({\n        props: [\n            /*@__PURE__*/indentNodeProp.add({\n                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|else\\b)/ }),\n                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\\s*({|catch)\\b/ }),\n                LabeledStatement: flatIndent,\n                CaseStatement: context => context.baseIndent + context.unit,\n                BlockComment: () => null,\n                CompoundStatement: /*@__PURE__*/delimitedIndent({ closing: \"}\" }),\n                Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })\n            }),\n            /*@__PURE__*/foldNodeProp.add({\n                \"DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList\": foldInside,\n                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }\n            })\n        ]\n    }),\n    languageData: {\n        commentTokens: { line: \"//\", block: { open: \"/*\", close: \"*/\" } },\n        indentOnInput: /^\\s*(?:case |default:|\\{|\\})$/,\n        closeBrackets: { stringPrefixes: [\"L\", \"u\", \"U\", \"u8\", \"LR\", \"UR\", \"uR\", \"u8R\", \"R\"] }\n    }\n});\n/**\nLanguage support for C++.\n*/\nfunction cpp() {\n    return new LanguageSupport(cppLanguage);\n}\n\nexport { cpp, cppLanguage };\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,YAAY;AACnC,SAASC,UAAU,EAAEC,cAAc,EAAEC,eAAe,EAAEC,UAAU,EAAEC,eAAe,EAAEC,YAAY,EAAEC,UAAU,EAAEC,eAAe,QAAQ,sBAAsB;;AAE1J;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,aAAaR,UAAU,CAACS,MAAM,CAAC;EAC/CC,IAAI,EAAE,KAAK;EACXX,MAAM,EAAE,aAAaA,MAAM,CAACY,SAAS,CAAC;IAClCC,KAAK,EAAE,CACH,aAAaX,cAAc,CAACY,GAAG,CAAC;MAC5BC,WAAW,EAAE,aAAaZ,eAAe,CAAC;QAAEa,MAAM,EAAE;MAAiB,CAAC,CAAC;MACvEC,YAAY,EAAE,aAAad,eAAe,CAAC;QAAEa,MAAM,EAAE;MAAkB,CAAC,CAAC;MACzEE,gBAAgB,EAAEd,UAAU;MAC5Be,aAAa,EAAEC,OAAO,IAAIA,OAAO,CAACC,UAAU,GAAGD,OAAO,CAACE,IAAI;MAC3DC,YAAY,EAAEA,CAAA,KAAM,IAAI;MACxBC,iBAAiB,EAAE,aAAanB,eAAe,CAAC;QAAEoB,OAAO,EAAE;MAAI,CAAC,CAAC;MACjEC,SAAS,EAAE,aAAavB,eAAe,CAAC;QAAEa,MAAM,EAAE;MAAK,CAAC;IAC5D,CAAC,CAAC,EACF,aAAaV,YAAY,CAACQ,GAAG,CAAC;MAC1B,uFAAuF,EAAEP,UAAU;MACnGgB,YAAYA,CAACI,IAAI,EAAE;QAAE,OAAO;UAAEC,IAAI,EAAED,IAAI,CAACC,IAAI,GAAG,CAAC;UAAEC,EAAE,EAAEF,IAAI,CAACE,EAAE,GAAG;QAAE,CAAC;MAAE;IAC1E,CAAC,CAAC;EAEV,CAAC,CAAC;EACFC,YAAY,EAAE;IACVC,aAAa,EAAE;MAAEC,IAAI,EAAE,IAAI;MAAEC,KAAK,EAAE;QAAEC,IAAI,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK;IAAE,CAAC;IACjEC,aAAa,EAAE,+BAA+B;IAC9CC,aAAa,EAAE;MAAEC,cAAc,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;IAAE;EACzF;AACJ,CAAC,CAAC;AACF;AACA;AACA;AACA,SAASC,GAAGA,CAAA,EAAG;EACX,OAAO,IAAI/B,eAAe,CAACC,WAAW,CAAC;AAC3C;AAEA,SAAS8B,GAAG,EAAE9B,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}