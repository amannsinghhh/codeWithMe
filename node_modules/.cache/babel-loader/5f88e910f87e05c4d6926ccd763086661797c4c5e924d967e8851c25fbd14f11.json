{"ast":null,"code":"var _jsxFileName = \"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState } from '@codemirror/state';\nimport axios from \"axios\";\nimport 'codemirror/lib/codemirror.css';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = () => {\n  _s();\n  const editorRef = useRef(null);\n  const [socket, setSocket] = useState(null);\n  useEffect(() => {\n    const newSocket = io('http://localhost:3001'); // Replace with your WebSocket server URL\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    if (editorRef.current && socket) {\n      const cm = CodeMirror(editorRef.current, {\n        lineNumbers: true,\n        mode: 'javascript'\n        // Add any other CodeMirror options you need\n      });\n\n      cm.on('change', (instance, changeObj) => {\n        socket.emit('editor-change', changeObj);\n      });\n      socket.on('editor-change', changeObj => {\n        cm.replaceRange(changeObj.text.join('\\n'), changeObj.from, changeObj.to);\n      });\n    }\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: editorRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 12\n  }, this);\n};\n_s(Editor, \"NXo9q2LEMZgMwojAOP7Jf8X58a8=\");\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CodeMirror","autocompletion","closeBrackets","closeBracketsKeymap","completionKeymap","vscodeDark","javascript","EditorState","axios","io","jsxDEV","_jsxDEV","Editor","_s","editorRef","socket","setSocket","newSocket","disconnect","current","cm","lineNumbers","mode","on","instance","changeObj","emit","replaceRange","text","join","from","to","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState } from '@codemirror/state';\nimport axios from \"axios\";\n\nimport 'codemirror/lib/codemirror.css';\nimport io from 'socket.io-client';\n\nconst Editor = () => {\n    const editorRef = useRef(null);\n    const [socket, setSocket] = useState(null);\n\n    useEffect(() => {\n        const newSocket = io('http://localhost:3001'); // Replace with your WebSocket server URL\n        setSocket(newSocket);\n\n        return () => {\n            newSocket.disconnect();\n        };\n    }, []);\n\n    useEffect(() => {\n        if (editorRef.current && socket) {\n            const cm = CodeMirror(editorRef.current, {\n                lineNumbers: true,\n                mode: 'javascript',\n                // Add any other CodeMirror options you need\n            });\n\n            cm.on('change', (instance, changeObj) => {\n                socket.emit('editor-change', changeObj);\n            });\n\n            socket.on('editor-change', (changeObj) => {\n                cm.replaceRange(\n                    changeObj.text.join('\\n'),\n                    changeObj.from,\n                    changeObj.to\n                );\n            });\n        }\n    }, [socket]);\n\n    return <div ref={editorRef} />;\n};\n\nexport default Editor;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,SAASC,cAAc,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,0BAA0B;AAC/G,SAASC,UAAU,QAAQ,8BAA8B;AACzD,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,+BAA+B;AACtC,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAMC,SAAS,GAAGhB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACiB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAE1CF,SAAS,CAAC,MAAM;IACZ,MAAMoB,SAAS,GAAGR,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAC/CO,SAAS,CAACC,SAAS,CAAC;IAEpB,OAAO,MAAM;MACTA,SAAS,CAACC,UAAU,CAAC,CAAC;IAC1B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAENrB,SAAS,CAAC,MAAM;IACZ,IAAIiB,SAAS,CAACK,OAAO,IAAIJ,MAAM,EAAE;MAC7B,MAAMK,EAAE,GAAGpB,UAAU,CAACc,SAAS,CAACK,OAAO,EAAE;QACrCE,WAAW,EAAE,IAAI;QACjBC,IAAI,EAAE;QACN;MACJ,CAAC,CAAC;;MAEFF,EAAE,CAACG,EAAE,CAAC,QAAQ,EAAE,CAACC,QAAQ,EAAEC,SAAS,KAAK;QACrCV,MAAM,CAACW,IAAI,CAAC,eAAe,EAAED,SAAS,CAAC;MAC3C,CAAC,CAAC;MAEFV,MAAM,CAACQ,EAAE,CAAC,eAAe,EAAGE,SAAS,IAAK;QACtCL,EAAE,CAACO,YAAY,CACXF,SAAS,CAACG,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC,EACzBJ,SAAS,CAACK,IAAI,EACdL,SAAS,CAACM,EACd,CAAC;MACL,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAAChB,MAAM,CAAC,CAAC;EAEZ,oBAAOJ,OAAA;IAAKqB,GAAG,EAAElB;EAAU;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAClC,CAAC;AAACvB,EAAA,CApCID,MAAM;AAAAyB,EAAA,GAANzB,MAAM;AAsCZ,eAAeA,MAAM;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}