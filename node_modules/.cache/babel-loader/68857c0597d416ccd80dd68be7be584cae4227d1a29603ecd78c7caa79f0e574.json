{"ast":null,"code":"import { NodeProp, Tree, TreeFragment, Parser, NodeType } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState } from '@codemirror/state';\nimport { ViewPlugin, logException } from '@codemirror/view';\nimport { countColumn } from '@codemirror/text';\nvar _a;\n/**\nNode prop stored in a grammar's top syntax node to provide the\nfacet that stores language data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n  return Facet.define({\n    combine: baseData ? values => values.concat(baseData) : undefined\n  });\n}\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. You'll\nwant to subclass this class for custom parsers, or use the\n[`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage) or\n[`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for\n[Lezer](https://lezer.codemirror.net/) or stream parsers.\n*/\nclass Language {\n  /**\n  Construct a language object. You usually don't need to invoke\n  this directly. But when you do, make sure you use\n  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create\n  the first argument.\n  */\n  constructor(\n  /**\n  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data\n  facet used for this language.\n  */\n  data, parser,\n  /**\n  The node type of the top node of trees produced by this parser.\n  */\n  topNode, extraExtensions = []) {\n    this.data = data;\n    this.topNode = topNode;\n    // Kludge to define EditorState.tree as a debugging helper,\n    // without the EditorState package actually knowing about\n    // languages and lezer trees.\n    if (!EditorState.prototype.hasOwnProperty(\"tree\")) Object.defineProperty(EditorState.prototype, \"tree\", {\n      get() {\n        return syntaxTree(this);\n      }\n    });\n    this.parser = parser;\n    this.extension = [language.of(this), EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))].concat(extraExtensions);\n  }\n  /**\n  Query whether this language is active at the given position.\n  */\n  isActiveAt(state, pos, side = -1) {\n    return languageDataFacetAt(state, pos, side) == this.data;\n  }\n  /**\n  Find the document regions that were parsed using this language.\n  The returned regions will _include_ any nested languages rooted\n  in this language, when those exist.\n  */\n  findRegions(state) {\n    let lang = state.facet(language);\n    if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{\n      from: 0,\n      to: state.doc.length\n    }];\n    if (!lang || !lang.allowsNesting) return [];\n    let result = [];\n    let explore = (tree, from) => {\n      if (tree.prop(languageDataProp) == this.data) {\n        result.push({\n          from,\n          to: from + tree.length\n        });\n        return;\n      }\n      let mount = tree.prop(NodeProp.mounted);\n      if (mount) {\n        if (mount.tree.prop(languageDataProp) == this.data) {\n          if (mount.overlay) for (let r of mount.overlay) result.push({\n            from: r.from + from,\n            to: r.to + from\n          });else result.push({\n            from: from,\n            to: from + tree.length\n          });\n          return;\n        } else if (mount.overlay) {\n          let size = result.length;\n          explore(mount.tree, mount.overlay[0].from + from);\n          if (result.length > size) return;\n        }\n      }\n      for (let i = 0; i < tree.children.length; i++) {\n        let ch = tree.children[i];\n        if (ch instanceof Tree) explore(ch, tree.positions[i] + from);\n      }\n    };\n    explore(syntaxTree(state), 0);\n    return result;\n  }\n  /**\n  Indicates whether this language allows nested languages. The\n  default implementation returns true.\n  */\n  get allowsNesting() {\n    return true;\n  }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction languageDataFacetAt(state, pos, side) {\n  let topLang = state.facet(language);\n  if (!topLang) return null;\n  let facet = topLang.data;\n  if (topLang.allowsNesting) {\n    for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, true, false)) facet = node.type.prop(languageDataProp) || facet;\n  }\n  return facet;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n  constructor(data, parser) {\n    super(data, parser, parser.topNode);\n    this.parser = parser;\n  }\n  /**\n  Define a language from a parser.\n  */\n  static define(spec) {\n    let data = defineLanguageFacet(spec.languageData);\n    return new LRLanguage(data, spec.parser.configure({\n      props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n    }));\n  }\n  /**\n  Create a new instance of this language with a reconfigured\n  version of its parser.\n  */\n  configure(options) {\n    return new LRLanguage(this.data, this.parser.configure(options));\n  }\n  get allowsNesting() {\n    return this.parser.wrappers.length > 0;\n  } // FIXME\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),\nor the empty tree if there is no language available.\n*/\nfunction syntaxTree(state) {\n  let field = state.field(Language.state, false);\n  return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n  var _a;\n  let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n  return !parse ? null : parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of thatâ€”the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserStopped) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n  var _a;\n  return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n  var _a;\n  return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n// Lezer-style Input object for a Text document.\nclass DocInput {\n  constructor(doc, length = doc.length) {\n    this.doc = doc;\n    this.length = length;\n    this.cursorPos = 0;\n    this.string = \"\";\n    this.cursor = doc.iter();\n  }\n  syncTo(pos) {\n    this.string = this.cursor.next(pos - this.cursorPos).value;\n    this.cursorPos = pos + this.string.length;\n    return this.cursorPos - this.string.length;\n  }\n  chunk(pos) {\n    this.syncTo(pos);\n    return this.string;\n  }\n  get lineChunks() {\n    return true;\n  }\n  read(from, to) {\n    let stringStart = this.cursorPos - this.string.length;\n    if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);\n  }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n  /**\n  @internal\n  */\n  constructor(parser,\n  /**\n  The current editor state.\n  */\n  state,\n  /**\n  Tree fragments that can be reused by incremental re-parses.\n  */\n  fragments = [],\n  /**\n  @internal\n  */\n  tree, treeLen,\n  /**\n  The current editor viewport (or some overapproximation\n  thereof). Intended to be used for opportunistically avoiding\n  work (in which case\n  [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n  should be called to make sure the parser is restarted when the\n  skipped region becomes visible).\n  */\n  viewport,\n  /**\n  @internal\n  */\n  skipped,\n  /**\n  This is where skipping parsers can register a promise that,\n  when resolved, will schedule a new parse. It is cleared when\n  the parse worker picks up the promise. @internal\n  */\n  scheduleOn) {\n    this.parser = parser;\n    this.state = state;\n    this.fragments = fragments;\n    this.tree = tree;\n    this.treeLen = treeLen;\n    this.viewport = viewport;\n    this.skipped = skipped;\n    this.scheduleOn = scheduleOn;\n    this.parse = null;\n    /**\n    @internal\n    */\n    this.tempSkipped = [];\n  }\n  startParse() {\n    return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n  }\n  /**\n  @internal\n  */\n  work(until, upto) {\n    if (upto != null && upto >= this.state.doc.length) upto = undefined;\n    if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n      this.takeTree();\n      return true;\n    }\n    return this.withContext(() => {\n      var _a;\n      if (typeof until == \"number\") {\n        let endTime = Date.now() + until;\n        until = () => Date.now() > endTime;\n      }\n      if (!this.parse) this.parse = this.startParse();\n      if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length) this.parse.stopAt(upto);\n      for (;;) {\n        let done = this.parse.advance();\n        if (done) {\n          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n          this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n          this.tree = done;\n          this.parse = null;\n          if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length)) this.parse = this.startParse();else return true;\n        }\n        if (until()) return false;\n      }\n    });\n  }\n  /**\n  @internal\n  */\n  takeTree() {\n    let pos, tree;\n    if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n      if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);\n      this.withContext(() => {\n        while (!(tree = this.parse.advance())) {}\n      });\n      this.treeLen = pos;\n      this.tree = tree;\n      this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n      this.parse = null;\n    }\n  }\n  withContext(f) {\n    let prev = currentContext;\n    currentContext = this;\n    try {\n      return f();\n    } finally {\n      currentContext = prev;\n    }\n  }\n  withoutTempSkipped(fragments) {\n    for (let r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);\n    return fragments;\n  }\n  /**\n  @internal\n  */\n  changes(changes, newState) {\n    let {\n      fragments,\n      tree,\n      treeLen,\n      viewport,\n      skipped\n    } = this;\n    this.takeTree();\n    if (!changes.empty) {\n      let ranges = [];\n      changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({\n        fromA,\n        toA,\n        fromB,\n        toB\n      }));\n      fragments = TreeFragment.applyChanges(fragments, ranges);\n      tree = Tree.empty;\n      treeLen = 0;\n      viewport = {\n        from: changes.mapPos(viewport.from, -1),\n        to: changes.mapPos(viewport.to, 1)\n      };\n      if (this.skipped.length) {\n        skipped = [];\n        for (let r of this.skipped) {\n          let from = changes.mapPos(r.from, 1),\n            to = changes.mapPos(r.to, -1);\n          if (from < to) skipped.push({\n            from,\n            to\n          });\n        }\n      }\n    }\n    return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n  }\n  /**\n  @internal\n  */\n  updateViewport(viewport) {\n    if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;\n    this.viewport = viewport;\n    let startLen = this.skipped.length;\n    for (let i = 0; i < this.skipped.length; i++) {\n      let {\n        from,\n        to\n      } = this.skipped[i];\n      if (from < viewport.to && to > viewport.from) {\n        this.fragments = cutFragments(this.fragments, from, to);\n        this.skipped.splice(i--, 1);\n      }\n    }\n    if (this.skipped.length >= startLen) return false;\n    this.reset();\n    return true;\n  }\n  /**\n  @internal\n  */\n  reset() {\n    if (this.parse) {\n      this.takeTree();\n      this.parse = null;\n    }\n  }\n  /**\n  Notify the parse scheduler that the given region was skipped\n  because it wasn't in view, and the parse should be restarted\n  when it comes into view.\n  */\n  skipUntilInView(from, to) {\n    this.skipped.push({\n      from,\n      to\n    });\n  }\n  /**\n  Returns a parser intended to be used as placeholder when\n  asynchronously loading a nested parser. It'll skip its input and\n  mark it as not-really-parsed, so that the next update will parse\n  it again.\n  \n  When `until` is given, a reparse will be scheduled when that\n  promise resolves.\n  */\n  static getSkippingParser(until) {\n    return new class extends Parser {\n      createParse(input, fragments, ranges) {\n        let from = ranges[0].from,\n          to = ranges[ranges.length - 1].to;\n        let parser = {\n          parsedPos: from,\n          advance() {\n            let cx = currentContext;\n            if (cx) {\n              for (let r of ranges) cx.tempSkipped.push(r);\n              if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n            }\n            this.parsedPos = to;\n            return new Tree(NodeType.none, [], [], to - from);\n          },\n          stoppedAt: null,\n          stopAt() {}\n        };\n        return parser;\n      }\n    }();\n  }\n  /**\n  @internal\n  */\n  isDone(upto) {\n    upto = Math.min(upto, this.state.doc.length);\n    let frags = this.fragments;\n    return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n  }\n  /**\n  Get the context for the current parse, or `null` if no editor\n  parse is in progress.\n  */\n  static get() {\n    return currentContext;\n  }\n}\nfunction cutFragments(fragments, from, to) {\n  return TreeFragment.applyChanges(fragments, [{\n    fromA: from,\n    toA: to,\n    fromB: from,\n    toB: to\n  }]);\n}\nclass LanguageState {\n  constructor(\n  // A mutable parse state that is used to preserve work done during\n  // the lifetime of a state when moving to the next state.\n  context) {\n    this.context = context;\n    this.tree = context.tree;\n  }\n  apply(tr) {\n    if (!tr.docChanged && this.tree == this.context.tree) return this;\n    let newCx = this.context.changes(tr.changes, tr.state);\n    // If the previous parse wasn't done, go forward only up to its\n    // end position or the end of the viewport, to avoid slowing down\n    // state updates with parse work beyond the viewport.\n    let upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n    if (!newCx.work(20 /* Apply */, upto)) newCx.takeTree();\n    return new LanguageState(newCx);\n  }\n  static init(state) {\n    let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);\n    let parseState = new ParseContext(state.facet(language).parser, state, [], Tree.empty, 0, {\n      from: 0,\n      to: vpTo\n    }, [], null);\n    if (!parseState.work(20 /* Apply */, vpTo)) parseState.takeTree();\n    return new LanguageState(parseState);\n  }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n  create: LanguageState.init,\n  update(value, tr) {\n    for (let e of tr.effects) if (e.is(Language.setState)) return e.value;\n    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);\n    return value.apply(tr);\n  }\n});\nlet requestIdle = callback => {\n  let timeout = setTimeout(() => callback(), 500 /* MaxPause */);\n  return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\") requestIdle = callback => {\n  let idle = -1,\n    timeout = setTimeout(() => {\n      idle = requestIdleCallback(callback, {\n        timeout: 500 /* MaxPause */ - 100 /* MinPause */\n      });\n    }, 100 /* MinPause */);\n  return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n};\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n  constructor(view) {\n    this.view = view;\n    this.working = null;\n    this.workScheduled = 0;\n    // End of the current time chunk\n    this.chunkEnd = -1;\n    // Milliseconds of budget left for this chunk\n    this.chunkBudget = -1;\n    this.work = this.work.bind(this);\n    this.scheduleWork();\n  }\n  update(update) {\n    let cx = this.view.state.field(Language.state).context;\n    if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();\n    if (update.docChanged) {\n      if (this.view.hasFocus) this.chunkBudget += 50 /* ChangeBonus */;\n      this.scheduleWork();\n    }\n    this.checkAsyncSchedule(cx);\n  }\n  scheduleWork() {\n    if (this.working) return;\n    let {\n        state\n      } = this.view,\n      field = state.field(Language.state);\n    if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);\n  }\n  work(deadline) {\n    this.working = null;\n    let now = Date.now();\n    if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {\n      // Start a new chunk\n      this.chunkEnd = now + 30000 /* ChunkTime */;\n      this.chunkBudget = 3000 /* ChunkBudget */;\n    }\n\n    if (this.chunkBudget <= 0) return; // No more budget\n    let {\n        state,\n        viewport: {\n          to: vpTo\n        }\n      } = this.view,\n      field = state.field(Language.state);\n    if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */)) return;\n    let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n    let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n    let done = field.context.work(() => {\n      return isInputPending && isInputPending() || Date.now() > endTime;\n    }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));\n    this.chunkBudget -= Date.now() - now;\n    if (done || this.chunkBudget <= 0) {\n      field.context.takeTree();\n      this.view.dispatch({\n        effects: Language.setState.of(new LanguageState(field.context))\n      });\n    }\n    if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();\n    this.checkAsyncSchedule(field.context);\n  }\n  checkAsyncSchedule(cx) {\n    if (cx.scheduleOn) {\n      this.workScheduled++;\n      cx.scheduleOn.then(() => this.scheduleWork()).catch(err => logException(this.view.state, err)).then(() => this.workScheduled--);\n      cx.scheduleOn = null;\n    }\n  }\n  destroy() {\n    if (this.working) this.working();\n  }\n  isWorking() {\n    return !!(this.working || this.workScheduled > 0);\n  }\n}, {\n  eventHandlers: {\n    focus() {\n      this.scheduleWork();\n    }\n  }\n});\n/**\nThe facet used to associate a language with an editor state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n  combine(languages) {\n    return languages.length ? languages[0] : null;\n  },\n  enables: [Language.state, parseWorker]\n});\n/**\nThis class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n  /**\n  Create a support object.\n  */\n  constructor(\n  /**\n  The language object.\n  */\n  language,\n  /**\n  An optional set of supporting extensions. When nesting a\n  language in another language, the outer language is encouraged\n  to include the supporting extensions for its inner languages\n  in its own set of support extensions.\n  */\n  support = []) {\n    this.language = language;\n    this.support = support;\n    this.extension = [language, support];\n  }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n  constructor(\n  /**\n  The name of this language.\n  */\n  name,\n  /**\n  Alternative names for the mode (lowercased, includes `this.name`).\n  */\n  alias,\n  /**\n  File extensions associated with this language.\n  */\n  extensions,\n  /**\n  Optional filename pattern that should be associated with this\n  language.\n  */\n  filename, loadFunc,\n  /**\n  If the language has been loaded, this will hold its value.\n  */\n  support = undefined) {\n    this.name = name;\n    this.alias = alias;\n    this.extensions = extensions;\n    this.filename = filename;\n    this.loadFunc = loadFunc;\n    this.support = support;\n    this.loading = null;\n  }\n  /**\n  Start loading the the language. Will return a promise that\n  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n  object when the language successfully loads.\n  */\n  load() {\n    return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => {\n      this.loading = null;\n      throw err;\n    }));\n  }\n  /**\n  Create a language description.\n  */\n  static of(spec) {\n    let {\n      load,\n      support\n    } = spec;\n    if (!load) {\n      if (!support) throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n      load = () => Promise.resolve(support);\n    }\n    return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n  }\n  /**\n  Look for a language in the given array of descriptions that\n  matches the filename. Will first match\n  [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n  and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n  and return the first language that matches.\n  */\n  static matchFilename(descs, filename) {\n    for (let d of descs) if (d.filename && d.filename.test(filename)) return d;\n    let ext = /\\.([^.]+)$/.exec(filename);\n    if (ext) for (let d of descs) if (d.extensions.indexOf(ext[1]) > -1) return d;\n    return null;\n  }\n  /**\n  Look for a language whose name or alias matches the the given\n  name (case-insensitively). If `fuzzy` is true, and no direct\n  matchs is found, this'll also search for a language whose name\n  or alias occurs in the string (for names shorter than three\n  characters, only when surrounded by non-word characters).\n  */\n  static matchLanguageName(descs, name, fuzzy = true) {\n    name = name.toLowerCase();\n    for (let d of descs) if (d.alias.some(a => a == name)) return d;\n    if (fuzzy) for (let d of descs) for (let a of d.alias) {\n      let found = name.indexOf(a);\n      if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length]))) return d;\n    }\n    return null;\n  }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth at the start of a given line, or\n`null` to indicate no appropriate indentation could be determined.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens.\nShould be a string consisting either entirely of spaces or\nentirely of tabs. When not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n  combine: values => {\n    if (!values.length) return \"  \";\n    if (!/^(?: +|\\t+)$/.test(values[0])) throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n    return values[0];\n  }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n  let unit = state.facet(indentUnit);\n  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n  let result = \"\",\n    ts = state.tabSize;\n  if (state.facet(indentUnit).charCodeAt(0) == 9) while (cols >= ts) {\n    result += \"\\t\";\n    cols -= ts;\n  }\n  for (let i = 0; i < cols; i++) result += \" \";\n  return result;\n}\n/**\nGet the indentation at the given position. Will first consult any\n[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,\nand if none of those return an indentation, this will check the\nsyntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)\nand use that if found. Returns a number when an indentation could\nbe determined, and null otherwise.\n*/\nfunction getIndentation(context, pos) {\n  if (context instanceof EditorState) context = new IndentContext(context);\n  for (let service of context.state.facet(indentService)) {\n    let result = service(context, pos);\n    if (result != null) return result;\n  }\n  let tree = syntaxTree(context.state);\n  return tree ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n  /**\n  Create an indent context.\n  */\n  constructor(\n  /**\n  The editor state.\n  */\n  state,\n  /**\n  @internal\n  */\n  options = {}) {\n    this.state = state;\n    this.options = options;\n    this.unit = getIndentUnit(state);\n  }\n  /**\n  Get a description of the line at the given position, taking\n  [simulated line\n  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  into account. If there is such a break at `pos`, the `bias`\n  argument determines whether the part of the line line before or\n  after the break is used.\n  */\n  lineAt(pos, bias = 1) {\n    let line = this.state.doc.lineAt(pos);\n    let {\n      simulateBreak,\n      simulateDoubleBreak\n    } = this.options;\n    if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n      if (simulateDoubleBreak && simulateBreak == pos) return {\n        text: \"\",\n        from: pos\n      };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {\n        text: line.text.slice(simulateBreak - line.from),\n        from: simulateBreak\n      };else return {\n        text: line.text.slice(0, simulateBreak - line.from),\n        from: line.from\n      };\n    }\n    return line;\n  }\n  /**\n  Get the text directly after `pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n  textAfterPos(pos, bias = 1) {\n    if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return \"\";\n    let {\n      text,\n      from\n    } = this.lineAt(pos, bias);\n    return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n  }\n  /**\n  Find the column for the given position.\n  */\n  column(pos, bias = 1) {\n    let {\n      text,\n      from\n    } = this.lineAt(pos, bias);\n    let result = this.countColumn(text, pos - from);\n    let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n    if (override > -1) result += override - this.countColumn(text, text.search(/\\S|$/));\n    return result;\n  }\n  /**\n  Find the column position (taking tabs into account) of the given\n  position in the given string.\n  */\n  countColumn(line, pos = line.length) {\n    return countColumn(line, this.state.tabSize, pos);\n  }\n  /**\n  Find the indentation column of the line at the given point.\n  */\n  lineIndent(pos, bias = 1) {\n    let {\n      text,\n      from\n    } = this.lineAt(pos, bias);\n    let override = this.options.overrideIndentation;\n    if (override) {\n      let overriden = override(from);\n      if (overriden > -1) return overriden;\n    }\n    return this.countColumn(text, text.search(/\\S|$/));\n  }\n  /**\n  Returns the [simulated line\n  break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  for this context, if any.\n  */\n  get simulatedBreak() {\n    return this.options.simulateBreak || null;\n  }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number or null, where null indicates that no\ndefinitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n  return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);\n}\nfunction ignoreClosed(cx) {\n  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n  let strategy = tree.type.prop(indentNodeProp);\n  if (strategy) return strategy;\n  let first = tree.firstChild,\n    close;\n  if (first && (close = first.type.prop(NodeProp.closedBy))) {\n    let last = tree.lastChild,\n      closed = last && close.indexOf(last.name) > -1;\n    return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n  }\n  return tree.parent == null ? topIndent : null;\n}\nfunction indentFrom(node, pos, base) {\n  for (; node; node = node.parent) {\n    let strategy = indentStrategy(node);\n    if (strategy) return strategy(new TreeIndentContext(base, pos, node));\n  }\n  return null;\n}\nfunction topIndent() {\n  return 0;\n}\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions.\n*/\nclass TreeIndentContext extends IndentContext {\n  /**\n  @internal\n  */\n  constructor(base,\n  /**\n  The position at which indentation is being computed.\n  */\n  pos,\n  /**\n  The syntax tree node to which the indentation strategy\n  applies.\n  */\n  node) {\n    super(base.state, base.options);\n    this.base = base;\n    this.pos = pos;\n    this.node = node;\n  }\n  /**\n  Get the text directly after `this.pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n  get textAfter() {\n    return this.textAfterPos(this.pos);\n  }\n  /**\n  Get the indentation at the reference line for `this.node`, which\n  is the line on which it starts, unless there is a node that is\n  _not_ a parent of this node covering the start of that line. If\n  so, the line at the start of that node is tried, again skipping\n  on if it is covered by another such node.\n  */\n  get baseIndent() {\n    let line = this.state.doc.lineAt(this.node.from);\n    // Skip line starts that are covered by a sibling (or cousin, etc)\n    for (;;) {\n      let atBreak = this.node.resolve(line.from);\n      while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;\n      if (isParent(atBreak, this.node)) break;\n      line = this.state.doc.lineAt(atBreak.from);\n    }\n    return this.lineIndent(line.from);\n  }\n  /**\n  Continue looking for indentations in the node's parent nodes,\n  and return the result of that.\n  */\n  continue() {\n    let parent = this.node.parent;\n    return parent ? indentFrom(parent, this.pos, this.base) : 0;\n  }\n}\nfunction isParent(parent, of) {\n  for (let cur = of; cur; cur = cur.parent) if (parent == cur) return true;\n  return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n  let tree = context.node;\n  let openToken = tree.childAfter(tree.from),\n    last = tree.lastChild;\n  if (!openToken) return null;\n  let sim = context.options.simulateBreak;\n  let openLine = context.state.doc.lineAt(openToken.from);\n  let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n  for (let pos = openToken.to;;) {\n    let next = tree.childAfter(pos);\n    if (!next || next == last) return null;\n    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;\n    pos = next.to;\n  }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({\n  closing,\n  align = true,\n  units = 1\n}) {\n  return context => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n  let after = context.textAfter,\n    space = after.match(/^\\s*/)[0].length;\n  let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n  let aligned = align ? bracketedAligned(context) : null;\n  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);\n  return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = context => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({\n  except,\n  units = 1\n} = {}) {\n  return context => {\n    let matchExcept = except && except.test(context.textAfter);\n    return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n  };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n  return EditorState.transactionFilter.of(tr => {\n    if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\")) return tr;\n    let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n    if (!rules.length) return tr;\n    let doc = tr.newDoc,\n      {\n        head\n      } = tr.newSelection.main,\n      line = doc.lineAt(head);\n    if (head > line.from + DontIndentBeyond) return tr;\n    let lineStart = doc.sliceString(line.from, head);\n    if (!rules.some(r => r.test(lineStart))) return tr;\n    let {\n        state\n      } = tr,\n      last = -1,\n      changes = [];\n    for (let {\n      head\n    } of state.selection.ranges) {\n      let line = state.doc.lineAt(head);\n      if (line.from == last) continue;\n      last = line.from;\n      let indent = getIndentation(state, line.from);\n      if (indent == null) continue;\n      let cur = /^\\s*/.exec(line.text)[0];\n      let norm = indentString(state, indent);\n      if (cur != norm) changes.push({\n        from: line.from,\n        to: line.from + cur.length,\n        insert: norm\n      });\n    }\n    return changes.length ? [tr, {\n      changes,\n      sequential: true\n    }] : tr;\n  });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n  let first = node.firstChild,\n    last = node.lastChild;\n  return first && first.to < last.from ? {\n    from: first.to,\n    to: last.type.isError ? node.to : last.from\n  } : null;\n}\nfunction syntaxFolding(state, start, end) {\n  let tree = syntaxTree(state);\n  if (tree.length == 0) return null;\n  let inner = tree.resolveInner(end);\n  let found = null;\n  for (let cur = inner; cur; cur = cur.parent) {\n    if (cur.to <= end || cur.from > end) continue;\n    if (found && cur.from < start) break;\n    let prop = cur.type.prop(foldNodeProp);\n    if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n      let value = prop(cur, state);\n      if (value && value.from <= end && value.from >= start && value.to > end) found = value;\n    }\n  }\n  return found;\n}\nfunction isUnfinished(node) {\n  let ch = node.lastChild;\n  return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n  for (let service of state.facet(foldService)) {\n    let result = service(state, lineStart, lineEnd);\n    if (result) return result;\n  }\n  return syntaxFolding(state, lineStart, lineEnd);\n}\nexport { IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, TreeIndentContext, continuedIndent, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldInside, foldNodeProp, foldService, foldable, getIndentUnit, getIndentation, indentNodeProp, indentOnInput, indentService, indentString, indentUnit, language, languageDataProp, syntaxParserRunning, syntaxTree, syntaxTreeAvailable };","map":{"version":3,"names":["NodeProp","Tree","TreeFragment","Parser","NodeType","StateEffect","StateField","Facet","EditorState","ViewPlugin","logException","countColumn","_a","languageDataProp","defineLanguageFacet","baseData","define","combine","values","concat","undefined","Language","constructor","data","parser","topNode","extraExtensions","prototype","hasOwnProperty","Object","defineProperty","get","syntaxTree","extension","language","of","languageData","state","pos","side","facet","languageDataFacetAt","isActiveAt","findRegions","lang","from","to","doc","length","allowsNesting","result","explore","tree","prop","push","mount","mounted","overlay","r","size","i","children","ch","positions","setState","topLang","node","enter","type","LRLanguage","spec","configure","props","add","isTop","options","wrappers","field","empty","ensureSyntaxTree","upto","timeout","parse","context","isDone","work","syntaxTreeAvailable","syntaxParserRunning","view","plugin","parseWorker","isWorking","DocInput","cursorPos","string","cursor","iter","syncTo","next","value","chunk","lineChunks","read","stringStart","sliceString","slice","currentContext","ParseContext","fragments","treeLen","viewport","skipped","scheduleOn","tempSkipped","startParse","until","takeTree","withContext","endTime","Date","now","stoppedAt","stopAt","done","advance","withoutTempSkipped","addTree","parsedPos","f","prev","pop","cutFragments","changes","newState","ranges","iterChangedRanges","fromA","toA","fromB","toB","applyChanges","mapPos","updateViewport","startLen","splice","reset","skipUntilInView","getSkippingParser","createParse","input","cx","Promise","all","none","Math","min","frags","LanguageState","apply","tr","docChanged","newCx","startState","max","init","vpTo","parseState","create","update","e","effects","is","requestIdle","callback","setTimeout","clearTimeout","requestIdleCallback","idle","cancelIdleCallback","isInputPending","navigator","scheduling","fromClass","ParseWorker","working","workScheduled","chunkEnd","chunkBudget","bind","scheduleWork","hasFocus","checkAsyncSchedule","deadline","timeRemaining","viewportFirst","dispatch","then","catch","err","destroy","eventHandlers","focus","languages","enables","LanguageSupport","support","LanguageDescription","name","alias","extensions","filename","loadFunc","loading","load","RangeError","resolve","map","s","toLowerCase","matchFilename","descs","d","test","ext","exec","indexOf","matchLanguageName","fuzzy","some","a","found","indentService","indentUnit","Error","JSON","stringify","getIndentUnit","unit","charCodeAt","tabSize","indentString","cols","ts","getIndentation","IndentContext","service","syntaxIndentation","lineAt","bias","line","simulateBreak","simulateDoubleBreak","text","textAfterPos","column","override","overrideIndentation","search","lineIndent","overriden","simulatedBreak","indentNodeProp","ast","indentFrom","resolveInner","enterUnfinishedNodesBefore","ignoreClosed","indentStrategy","strategy","first","firstChild","close","closedBy","last","lastChild","closed","delimitedStrategy","parent","topIndent","base","TreeIndentContext","textAfter","baseIndent","atBreak","isParent","continue","cur","bracketedAligned","openToken","childAfter","sim","openLine","lineEnd","isSkipped","delimitedIndent","closing","align","units","closedAt","after","space","match","aligned","flatIndent","continuedIndent","except","matchExcept","DontIndentBeyond","indentOnInput","transactionFilter","isUserEvent","rules","languageDataAt","selection","main","head","newDoc","newSelection","lineStart","indent","norm","insert","sequential","foldService","foldNodeProp","foldInside","isError","syntaxFolding","start","end","inner","isUnfinished","foldable"],"sources":["/Users/amansingh/Desktop/CodeWithMe/node_modules/@codemirror/matchbrackets/node_modules/@codemirror/language/dist/index.js"],"sourcesContent":["import { NodeProp, Tree, TreeFragment, Parser, NodeType } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState } from '@codemirror/state';\nimport { ViewPlugin, logException } from '@codemirror/view';\nimport { countColumn } from '@codemirror/text';\n\nvar _a;\n/**\nNode prop stored in a grammar's top syntax node to provide the\nfacet that stores language data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n    return Facet.define({\n        combine: baseData ? values => values.concat(baseData) : undefined\n    });\n}\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. You'll\nwant to subclass this class for custom parsers, or use the\n[`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage) or\n[`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for\n[Lezer](https://lezer.codemirror.net/) or stream parsers.\n*/\nclass Language {\n    /**\n    Construct a language object. You usually don't need to invoke\n    this directly. But when you do, make sure you use\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create\n    the first argument.\n    */\n    constructor(\n    /**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data\n    facet used for this language.\n    */\n    data, parser, \n    /**\n    The node type of the top node of trees produced by this parser.\n    */\n    topNode, extraExtensions = []) {\n        this.data = data;\n        this.topNode = topNode;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n            Object.defineProperty(EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\n        this.parser = parser;\n        this.extension = [\n            language.of(this),\n            EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */\n    isActiveAt(state, pos, side = -1) {\n        return languageDataFacetAt(state, pos, side) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n    findRegions(state) {\n        let lang = state.facet(language);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n            return [{ from: 0, to: state.doc.length }];\n        if (!lang || !lang.allowsNesting)\n            return [];\n        let result = [];\n        let explore = (tree, from) => {\n            if (tree.prop(languageDataProp) == this.data) {\n                result.push({ from, to: from + tree.length });\n                return;\n            }\n            let mount = tree.prop(NodeProp.mounted);\n            if (mount) {\n                if (mount.tree.prop(languageDataProp) == this.data) {\n                    if (mount.overlay)\n                        for (let r of mount.overlay)\n                            result.push({ from: r.from + from, to: r.to + from });\n                    else\n                        result.push({ from: from, to: from + tree.length });\n                    return;\n                }\n                else if (mount.overlay) {\n                    let size = result.length;\n                    explore(mount.tree, mount.overlay[0].from + from);\n                    if (result.length > size)\n                        return;\n                }\n            }\n            for (let i = 0; i < tree.children.length; i++) {\n                let ch = tree.children[i];\n                if (ch instanceof Tree)\n                    explore(ch, tree.positions[i] + from);\n            }\n        };\n        explore(syntaxTree(state), 0);\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n    get allowsNesting() { return true; }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction languageDataFacetAt(state, pos, side) {\n    let topLang = state.facet(language);\n    if (!topLang)\n        return null;\n    let facet = topLang.data;\n    if (topLang.allowsNesting) {\n        for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, true, false))\n            facet = node.type.prop(languageDataProp) || facet;\n    }\n    return facet;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n    constructor(data, parser) {\n        super(data, parser, parser.topNode);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */\n    static define(spec) {\n        let data = defineLanguageFacet(spec.languageData);\n        return new LRLanguage(data, spec.parser.configure({\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n        }));\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser.\n    */\n    configure(options) {\n        return new LRLanguage(this.data, this.parser.configure(options));\n    }\n    get allowsNesting() { return this.parser.wrappers.length > 0; } // FIXME\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),\nor the empty tree if there is no language available.\n*/\nfunction syntaxTree(state) {\n    let field = state.field(Language.state, false);\n    return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    return !parse ? null : parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of thatâ€”the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserStopped) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n    var _a;\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n    var _a;\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n// Lezer-style Input object for a Text document.\nclass DocInput {\n    constructor(doc, length = doc.length) {\n        this.doc = doc;\n        this.length = length;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.cursor = doc.iter();\n    }\n    syncTo(pos) {\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    chunk(pos) {\n        this.syncTo(pos);\n        return this.string;\n    }\n    get lineChunks() { return true; }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos)\n            return this.doc.sliceString(from, to);\n        else\n            return this.string.slice(from - stringStart, to - stringStart);\n    }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n    /**\n    @internal\n    */\n    constructor(parser, \n    /**\n    The current editor state.\n    */\n    state, \n    /**\n    Tree fragments that can be reused by incremental re-parses.\n    */\n    fragments = [], \n    /**\n    @internal\n    */\n    tree, treeLen, \n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport, \n    /**\n    @internal\n    */\n    skipped, \n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn) {\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.treeLen = treeLen;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */\n        this.tempSkipped = [];\n    }\n    startParse() {\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n    work(until, upto) {\n        if (upto != null && upto >= this.state.doc.length)\n            upto = undefined;\n        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n            this.takeTree();\n            return true;\n        }\n        return this.withContext(() => {\n            var _a;\n            if (typeof until == \"number\") {\n                let endTime = Date.now() + until;\n                until = () => Date.now() > endTime;\n            }\n            if (!this.parse)\n                this.parse = this.startParse();\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\n                upto < this.state.doc.length)\n                this.parse.stopAt(upto);\n            for (;;) {\n                let done = this.parse.advance();\n                if (done) {\n                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n                    this.tree = done;\n                    this.parse = null;\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\n                        this.parse = this.startParse();\n                    else\n                        return true;\n                }\n                if (until())\n                    return false;\n            }\n        });\n    }\n    /**\n    @internal\n    */\n    takeTree() {\n        let pos, tree;\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\n                this.parse.stopAt(pos);\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\n            this.treeLen = pos;\n            this.tree = tree;\n            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n            this.parse = null;\n        }\n    }\n    withContext(f) {\n        let prev = currentContext;\n        currentContext = this;\n        try {\n            return f();\n        }\n        finally {\n            currentContext = prev;\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for (let r; r = this.tempSkipped.pop();)\n            fragments = cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */\n    changes(changes, newState) {\n        let { fragments, tree, treeLen, viewport, skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n            fragments = TreeFragment.applyChanges(fragments, ranges);\n            tree = Tree.empty;\n            treeLen = 0;\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped) {\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to)\n                        skipped.push({ from, to });\n                }\n            }\n        }\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n    updateViewport(viewport) {\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\n            return false;\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for (let i = 0; i < this.skipped.length; i++) {\n            let { from, to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        if (this.skipped.length >= startLen)\n            return false;\n        this.reset();\n        return true;\n    }\n    /**\n    @internal\n    */\n    reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n    skipUntilInView(from, to) {\n        this.skipped.push({ from, to });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n    static getSkippingParser(until) {\n        return new class extends Parser {\n            createParse(input, fragments, ranges) {\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n                let parser = {\n                    parsedPos: from,\n                    advance() {\n                        let cx = currentContext;\n                        if (cx) {\n                            for (let r of ranges)\n                                cx.tempSkipped.push(r);\n                            if (until)\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                        }\n                        this.parsedPos = to;\n                        return new Tree(NodeType.none, [], [], to - from);\n                    },\n                    stoppedAt: null,\n                    stopAt() { }\n                };\n                return parser;\n            }\n        };\n    }\n    /**\n    @internal\n    */\n    isDone(upto) {\n        upto = Math.min(upto, this.state.doc.length);\n        let frags = this.fragments;\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n    static get() { return currentContext; }\n}\nfunction cutFragments(fragments, from, to) {\n    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\n}\nclass LanguageState {\n    constructor(\n    // A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context) {\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged && this.tree == this.context.tree)\n            return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n        if (!newCx.work(20 /* Apply */, upto))\n            newCx.takeTree();\n        return new LanguageState(newCx);\n    }\n    static init(state) {\n        let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);\n        let parseState = new ParseContext(state.facet(language).parser, state, [], Tree.empty, 0, { from: 0, to: vpTo }, [], null);\n        if (!parseState.work(20 /* Apply */, vpTo))\n            parseState.takeTree();\n        return new LanguageState(parseState);\n    }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n    create: LanguageState.init,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(Language.setState))\n                return e.value;\n        if (tr.startState.facet(language) != tr.state.facet(language))\n            return LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet requestIdle = (callback) => {\n    let timeout = setTimeout(() => callback(), 500 /* MaxPause */);\n    return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\")\n    requestIdle = (callback) => {\n        let idle = -1, timeout = setTimeout(() => {\n            idle = requestIdleCallback(callback, { timeout: 500 /* MaxPause */ - 100 /* MinPause */ });\n        }, 100 /* MinPause */);\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n    };\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\n    ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n    constructor(view) {\n        this.view = view;\n        this.working = null;\n        this.workScheduled = 0;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field(Language.state).context;\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\n            this.scheduleWork();\n        if (update.docChanged) {\n            if (this.view.hasFocus)\n                this.chunkBudget += 50 /* ChangeBonus */;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork() {\n        if (this.working)\n            return;\n        let { state } = this.view, field = state.field(Language.state);\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\n            this.working = requestIdle(this.work);\n    }\n    work(deadline) {\n        this.working = null;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\n            this.chunkEnd = now + 30000 /* ChunkTime */;\n            this.chunkBudget = 3000 /* ChunkBudget */;\n        }\n        if (this.chunkBudget <= 0)\n            return; // No more budget\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */))\n            return;\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n        let done = field.context.work(() => {\n            return isInputPending && isInputPending() || Date.now() > endTime;\n        }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0) {\n            field.context.takeTree();\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\n        }\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\n            this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            this.workScheduled++;\n            cx.scheduleOn\n                .then(() => this.scheduleWork())\n                .catch(err => logException(this.view.state, err))\n                .then(() => this.workScheduled--);\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working)\n            this.working();\n    }\n    isWorking() {\n        return !!(this.working || this.workScheduled > 0);\n    }\n}, {\n    eventHandlers: { focus() { this.scheduleWork(); } }\n});\n/**\nThe facet used to associate a language with an editor state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n    combine(languages) { return languages.length ? languages[0] : null; },\n    enables: [Language.state, parseWorker]\n});\n/**\nThis class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n    /**\n    Create a support object.\n    */\n    constructor(\n    /**\n    The language object.\n    */\n    language, \n    /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */\n    support = []) {\n        this.language = language;\n        this.support = support;\n        this.extension = [language, support];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n    constructor(\n    /**\n    The name of this language.\n    */\n    name, \n    /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */\n    alias, \n    /**\n    File extensions associated with this language.\n    */\n    extensions, \n    /**\n    Optional filename pattern that should be associated with this\n    language.\n    */\n    filename, loadFunc, \n    /**\n    If the language has been loaded, this will hold its value.\n    */\n    support = undefined) {\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        this.support = support;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */\n    load() {\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\n    }\n    /**\n    Create a language description.\n    */\n    static of(spec) {\n        let { load, support } = spec;\n        if (!load) {\n            if (!support)\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n            load = () => Promise.resolve(support);\n        }\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n    static matchFilename(descs, filename) {\n        for (let d of descs)\n            if (d.filename && d.filename.test(filename))\n                return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext)\n            for (let d of descs)\n                if (d.extensions.indexOf(ext[1]) > -1)\n                    return d;\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n    static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)\n            if (d.alias.some(a => a == name))\n                return d;\n        if (fuzzy)\n            for (let d of descs)\n                for (let a of d.alias) {\n                    let found = name.indexOf(a);\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\n                        return d;\n                }\n        return null;\n    }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth at the start of a given line, or\n`null` to indicate no appropriate indentation could be determined.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens.\nShould be a string consisting either entirely of spaces or\nentirely of tabs. When not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n    combine: values => {\n        if (!values.length)\n            return \"  \";\n        if (!/^(?: +|\\t+)$/.test(values[0]))\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return values[0];\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n    let unit = state.facet(indentUnit);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n    let result = \"\", ts = state.tabSize;\n    if (state.facet(indentUnit).charCodeAt(0) == 9)\n        while (cols >= ts) {\n            result += \"\\t\";\n            cols -= ts;\n        }\n    for (let i = 0; i < cols; i++)\n        result += \" \";\n    return result;\n}\n/**\nGet the indentation at the given position. Will first consult any\n[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,\nand if none of those return an indentation, this will check the\nsyntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)\nand use that if found. Returns a number when an indentation could\nbe determined, and null otherwise.\n*/\nfunction getIndentation(context, pos) {\n    if (context instanceof EditorState)\n        context = new IndentContext(context);\n    for (let service of context.state.facet(indentService)) {\n        let result = service(context, pos);\n        if (result != null)\n            return result;\n    }\n    let tree = syntaxTree(context.state);\n    return tree ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n    /**\n    Create an indent context.\n    */\n    constructor(\n    /**\n    The editor state.\n    */\n    state, \n    /**\n    @internal\n    */\n    options = {}) {\n        this.state = state;\n        this.options = options;\n        this.unit = getIndentUnit(state);\n    }\n    /**\n    Get a description of the line at the given position, taking\n    [simulated line\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    into account. If there is such a break at `pos`, the `bias`\n    argument determines whether the part of the line line before or\n    after the break is used.\n    */\n    lineAt(pos, bias = 1) {\n        let line = this.state.doc.lineAt(pos);\n        let { simulateBreak, simulateDoubleBreak } = this.options;\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n            if (simulateDoubleBreak && simulateBreak == pos)\n                return { text: \"\", from: pos };\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\n            else\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\n        }\n        return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    textAfterPos(pos, bias = 1) {\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\n            return \"\";\n        let { text, from } = this.lineAt(pos, bias);\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n    column(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let result = this.countColumn(text, pos - from);\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n        if (override > -1)\n            result += override - this.countColumn(text, text.search(/\\S|$/));\n        return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n    countColumn(line, pos = line.length) {\n        return countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n    lineIndent(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let override = this.options.overrideIndentation;\n        if (override) {\n            let overriden = override(from);\n            if (overriden > -1)\n                return overriden;\n        }\n        return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n    get simulatedBreak() {\n        return this.options.simulateBreak || null;\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number or null, where null indicates that no\ndefinitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n    return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);\n}\nfunction ignoreClosed(cx) {\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n    let strategy = tree.type.prop(indentNodeProp);\n    if (strategy)\n        return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop(NodeProp.closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? topIndent : null;\n}\nfunction indentFrom(node, pos, base) {\n    for (; node; node = node.parent) {\n        let strategy = indentStrategy(node);\n        if (strategy)\n            return strategy(new TreeIndentContext(base, pos, node));\n    }\n    return null;\n}\nfunction topIndent() { return 0; }\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions.\n*/\nclass TreeIndentContext extends IndentContext {\n    /**\n    @internal\n    */\n    constructor(base, \n    /**\n    The position at which indentation is being computed.\n    */\n    pos, \n    /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */\n    node) {\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.node = node;\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n    get baseIndent() {\n        let line = this.state.doc.lineAt(this.node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for (;;) {\n            let atBreak = this.node.resolve(line.from);\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\n                atBreak = atBreak.parent;\n            if (isParent(atBreak, this.node))\n                break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    continue() {\n        let parent = this.node.parent;\n        return parent ? indentFrom(parent, this.pos, this.base) : 0;\n    }\n}\nfunction isParent(parent, of) {\n    for (let cur = of; cur; cur = cur.parent)\n        if (parent == cur)\n            return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken)\n        return null;\n    let sim = context.options.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for (let pos = openToken.to;;) {\n        let next = tree.childAfter(pos);\n        if (!next || next == last)\n            return null;\n        if (!next.type.isSkipped)\n            return next.from < lineEnd ? openToken : null;\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\n    return (context) => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? bracketedAligned(context) : null;\n    if (aligned)\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = (context) => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({ except, units = 1 } = {}) {\n    return (context) => {\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n    return EditorState.transactionFilter.of(tr => {\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\n            return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length)\n            return tr;\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + DontIndentBeyond)\n            return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some(r => r.test(lineStart)))\n            return tr;\n        let { state } = tr, last = -1, changes = [];\n        for (let { head } of state.selection.ranges) {\n            let line = state.doc.lineAt(head);\n            if (line.from == last)\n                continue;\n            last = line.from;\n            let indent = getIndentation(state, line.from);\n            if (indent == null)\n                continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = indentString(state, indent);\n            if (cur != norm)\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\n    });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\n}\nfunction syntaxFolding(state, start, end) {\n    let tree = syntaxTree(state);\n    if (tree.length == 0)\n        return null;\n    let inner = tree.resolveInner(end);\n    let found = null;\n    for (let cur = inner; cur; cur = cur.parent) {\n        if (cur.to <= end || cur.from > end)\n            continue;\n        if (found && cur.from < start)\n            break;\n        let prop = cur.type.prop(foldNodeProp);\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end)\n                found = value;\n        }\n    }\n    return found;\n}\nfunction isUnfinished(node) {\n    let ch = node.lastChild;\n    return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n    for (let service of state.facet(foldService)) {\n        let result = service(state, lineStart, lineEnd);\n        if (result)\n            return result;\n    }\n    return syntaxFolding(state, lineStart, lineEnd);\n}\n\nexport { IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, TreeIndentContext, continuedIndent, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldInside, foldNodeProp, foldService, foldable, getIndentUnit, getIndentation, indentNodeProp, indentOnInput, indentService, indentString, indentUnit, language, languageDataProp, syntaxParserRunning, syntaxTree, syntaxTreeAvailable };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}