{"ast":null,"code":"var _jsxFileName = \"/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState } from '@codemirror/state';\nimport axios from \"axios\";\nimport ACTIONS from \"../action\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = ({\n  socketRef,\n  roomId,\n  onCodeChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const [code, setCode] = useState(\"console.log('Start Writing!');\");\n  //     const [output, setOutput] = useState(\"\");\n  useEffect(() => {\n    async function init() {\n      editorRef.current = /*#__PURE__*/_jsxDEV(CodeMirror, {\n        ref: editorRef // Assign the ref here\n        ,\n        value: code,\n        height: \"650px\",\n        theme: vscodeDark,\n        options: {\n          mode: {\n            name: javascript(),\n            json: true\n          },\n          theme: 'material',\n          lineNumbers: true,\n          autocompletion: true,\n          autocloseBrackets: true\n        },\n        onChange: (editor, data, value) => {\n          setCode(value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 33\n      }, this);\n      editorRef.current.on('change', (instance, changes) => {\n        const {\n          origin\n        } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n        if (origin !== 'setValue') {\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n            roomId,\n            code\n          });\n        }\n      });\n    }\n    init();\n  }, []);\n  useEffect(() => {\n    if (socketRef.current) {\n      socketRef.current.on(ACTIONS.CODE_CHANGE, ({\n        code\n      }) => {\n        if (code !== null) {\n          editorRef.current.setValue(code);\n        }\n      });\n    }\n    return () => {\n      socketRef.current.off(ACTIONS.CODE_CHANGE);\n    };\n  }, [socketRef.current]);\n  return /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: \"realtimeEditor\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 12\n  }, this);\n};\n_s(Editor, \"dGwai9NkvfB/JSRzExxGjjD7ryk=\");\n_c = Editor;\nexport default Editor;\n// const Editor = ({ socketRef, roomID, onCodeChange }) => {\n//     const editorRef = useRef(null);\n//     const [code, setCode] = useState(\"console.log('Start Writing!');\");\n//     const [output, setOutput] = useState(\"\");\n\n//     useEffect(() => {\n//         if (socketRef.current) {\n//             socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n//                 if (code !== null) {\n//                     editorRef.current.editor.setValue(code); // Update the editor content\n//                 }\n//             });\n//         }\n//         return () => {\n//             socketRef.current.off(ACTIONS.CODE_CHANGE)\n//         }\n//     }, [socketRef.current]);\n\n//     const handleChange = (editor, data, value) => {\n//         setCode(value);\n//         socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//             roomID,\n//             code: value,\n//         });\n//     };\n//     const runCode = async () => {\n//         try {\n//             setOutput(\"Running...\");\n\n//             const response = await axios.post(\n//                 \"https://runkit.io/api/run/1.0.0\",\n//                 { code },\n//                 {\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                 }\n//             );\n//             setOutput(response.data);\n\n//             editorRef.current.on('change', (instance, changes) => {\n//                 console.log('changes', changes)\n//                 const { origin } = changes;\n//                 const code = instance.getValue();\n//                 onCodeChange(code)\n//                 if (origin !== 'setValue') {\n//                     socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//                         roomID,\n//                         code,\n//                     });\n//                 }\n//             });\n//         } catch (error) {\n//             setOutput(\"Error: \" + error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n\n//             <CodeMirror\n//                 ref={editorRef} // Assign the ref here\n//                 value={code}\n//                 height=\"650px\"\n//                 theme={vscodeDark}\n//                 options={{\n//                     mode: { name: javascript(), json: true },\n//                     theme: 'material',\n//                     lineNumbers: true,\n//                     autocompletion: true,\n//                     autocloseBrackets: true,\n\n//                 }}\n//                 onChange={(editor, data, value) => {\n//                     setCode(value);\n//                 }}\n//             />\n//             <button className=\"btn runbtn\" onClick={runCode}>Run</button>\n//             <h2 className=\"outputtxt\">Output:</h2>\n//             <pre>{output}</pre>\n//         </div>\n//     );\n// };\n\n// export default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["React","useEffect","useRef","useState","CodeMirror","autocompletion","closeBrackets","closeBracketsKeymap","completionKeymap","vscodeDark","javascript","EditorState","axios","ACTIONS","jsxDEV","_jsxDEV","Editor","socketRef","roomId","onCodeChange","_s","editorRef","code","setCode","init","current","ref","value","height","theme","options","mode","name","json","lineNumbers","autocloseBrackets","onChange","editor","data","fileName","_jsxFileName","lineNumber","columnNumber","on","instance","changes","origin","getValue","emit","CODE_CHANGE","setValue","off","id","_c","$RefreshReg$"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { vscodeDark } from \"@uiw/codemirror-theme-vscode\";\nimport { javascript } from '@codemirror/lang-javascript';\nimport { EditorState } from '@codemirror/state';\nimport axios from \"axios\";\nimport ACTIONS from \"../action\";\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n    const editorRef = useRef(null);\n    const [code, setCode] = useState(\"console.log('Start Writing!');\");\n    //     const [output, setOutput] = useState(\"\");\n    useEffect(() => {\n        async function init() {\n            editorRef.current = <CodeMirror\n                ref={editorRef} // Assign the ref here\n                value={code}\n                height=\"650px\"\n                theme={vscodeDark}\n                options={{\n                    mode: { name: javascript(), json: true },\n                    theme: 'material',\n                    lineNumbers: true,\n                    autocompletion: true,\n                    autocloseBrackets: true,\n\n                }}\n                onChange={(editor, data, value) => {\n                    setCode(value);\n                }}\n            />\n\n            editorRef.current.on('change', (instance, changes) => {\n                const { origin } = changes;\n                const code = instance.getValue();\n                onCodeChange(code);\n                if (origin !== 'setValue') {\n                    socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n                        roomId,\n                        code,\n                    });\n                }\n            });\n        }\n        init();\n    }, []);\n\n    useEffect(() => {\n        if (socketRef.current) {\n            socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n                if (code !== null) {\n                    editorRef.current.setValue(code);\n                }\n            });\n        }\n\n        return () => {\n            socketRef.current.off(ACTIONS.CODE_CHANGE);\n        };\n    }, [socketRef.current]);\n\n    return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;\n// const Editor = ({ socketRef, roomID, onCodeChange }) => {\n//     const editorRef = useRef(null);\n//     const [code, setCode] = useState(\"console.log('Start Writing!');\");\n//     const [output, setOutput] = useState(\"\");\n\n//     useEffect(() => {\n//         if (socketRef.current) {\n//             socketRef.current.on(ACTIONS.CODE_CHANGE, ({ code }) => {\n//                 if (code !== null) {\n//                     editorRef.current.editor.setValue(code); // Update the editor content\n//                 }\n//             });\n//         }\n//         return () => {\n//             socketRef.current.off(ACTIONS.CODE_CHANGE)\n//         }\n//     }, [socketRef.current]);\n\n//     const handleChange = (editor, data, value) => {\n//         setCode(value);\n//         socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//             roomID,\n//             code: value,\n//         });\n//     };\n//     const runCode = async () => {\n//         try {\n//             setOutput(\"Running...\");\n\n//             const response = await axios.post(\n//                 \"https://runkit.io/api/run/1.0.0\",\n//                 { code },\n//                 {\n//                     headers: {\n//                         \"Content-Type\": \"application/json\",\n//                     },\n//                 }\n//             );\n//             setOutput(response.data);\n\n//             editorRef.current.on('change', (instance, changes) => {\n//                 console.log('changes', changes)\n//                 const { origin } = changes;\n//                 const code = instance.getValue();\n//                 onCodeChange(code)\n//                 if (origin !== 'setValue') {\n//                     socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n//                         roomID,\n//                         code,\n//                     });\n//                 }\n//             });\n//         } catch (error) {\n//             setOutput(\"Error: \" + error.message);\n//         }\n//     };\n\n//     return (\n//         <div>\n\n//             <CodeMirror\n//                 ref={editorRef} // Assign the ref here\n//                 value={code}\n//                 height=\"650px\"\n//                 theme={vscodeDark}\n//                 options={{\n//                     mode: { name: javascript(), json: true },\n//                     theme: 'material',\n//                     lineNumbers: true,\n//                     autocompletion: true,\n//                     autocloseBrackets: true,\n\n//                 }}\n//                 onChange={(editor, data, value) => {\n//                     setCode(value);\n//                 }}\n//             />\n//             <button className=\"btn runbtn\" onClick={runCode}>Run</button>\n//             <h2 className=\"outputtxt\">Output:</h2>\n//             <pre>{output}</pre>\n//         </div>\n//     );\n// };\n\n// export default Editor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}