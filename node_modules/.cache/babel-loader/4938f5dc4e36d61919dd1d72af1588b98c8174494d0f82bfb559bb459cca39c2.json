{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst on_js_1 = require(\"./on.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nclass Socket extends component_emitter_1.Emitter {\n  /**\n   * `Socket` constructor.\n   */\n  constructor(io, nsp, opts) {\n    super();\n    /**\n     * Whether the socket is currently connected to the server.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.connected); // true\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.connected); // false\n     * });\n     */\n    this.connected = false;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted by the server.\n     */\n    this.recovered = false;\n    /**\n     * Buffer for packets received before the CONNECT packet\n     */\n    this.receiveBuffer = [];\n    /**\n     * Buffer for packets that will be sent once the socket is connected\n     */\n    this.sendBuffer = [];\n    /**\n     * The queue of packets to be sent with retry in case of failure.\n     *\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n     * @private\n     */\n    this._queue = [];\n    /**\n     * A sequence to generate the ID of the {@link QueuedPacket}.\n     * @private\n     */\n    this._queueSeq = 0;\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n    this._opts = Object.assign({}, opts);\n    if (this.io._autoConnect) this.open();\n  }\n  /**\n   * Whether the socket is currently disconnected\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(socket.disconnected); // false\n   * });\n   *\n   * socket.on(\"disconnect\", () => {\n   *   console.log(socket.disconnected); // true\n   * });\n   */\n  get disconnected() {\n    return !this.connected;\n  }\n  /**\n   * Subscribe to open, close and packet events\n   *\n   * @private\n   */\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on_js_1.on(io, \"open\", this.onopen.bind(this)), on_js_1.on(io, \"packet\", this.onpacket.bind(this)), on_js_1.on(io, \"error\", this.onerror.bind(this)), on_js_1.on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n   *\n   * @example\n   * const socket = io();\n   *\n   * console.log(socket.active); // true\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   if (reason === \"io server disconnect\") {\n   *     // the disconnection was initiated by the server, you need to manually reconnect\n   *     console.log(socket.active); // false\n   *   }\n   *   // else the socket will automatically try to reconnect\n   *   console.log(socket.active); // true\n   * });\n   */\n  get active() {\n    return !!this.subs;\n  }\n  /**\n   * \"Opens\" the socket.\n   *\n   * @example\n   * const socket = io({\n   *   autoConnect: false\n   * });\n   *\n   * socket.connect();\n   */\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\n   * Alias for {@link connect()}.\n   */\n  open() {\n    return this.connect();\n  }\n  /**\n   * Sends a `message` event.\n   *\n   * This method mimics the WebSocket.send() method.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n   *\n   * @example\n   * socket.send(\"hello\");\n   *\n   * // this is equivalent to\n   * socket.emit(\"message\", \"hello\");\n   *\n   * @return self\n   */\n  send(...args) {\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\n   * Override `emit`.\n   * If the event is in `events`, it's emitted normally.\n   *\n   * @example\n   * socket.emit(\"hello\", \"world\");\n   *\n   * // all serializable datastructures are supported (no need to call JSON.stringify)\n   * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n   *\n   * // with an acknowledgement from the server\n   * socket.emit(\"hello\", \"world\", (val) => {\n   *   // ...\n   * });\n   *\n   * @return self\n   */\n  emit(ev, ...args) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n    }\n    args.unshift(ev);\n    if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n      this._addToQueue(args);\n      return this;\n    }\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false;\n    // event ack callback\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      debug(\"emitting packet with ack id %d\", id);\n      const ack = args.pop();\n      this._registerAckCallback(id, ack);\n      packet.id = id;\n    }\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n    if (discardPacket) {\n      debug(\"discard packet as the transport is not currently writable\");\n    } else if (this.connected) {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n    this.flags = {};\n    return this;\n  }\n  /**\n   * @private\n   */\n  _registerAckCallback(id, ack) {\n    var _a;\n    const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    }\n    // @ts-ignore\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          debug(\"removing packet with ack id %d from the buffer\", id);\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n      debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n    this.acks[id] = (...args) => {\n      // @ts-ignore\n      this.io.clearTimeoutFn(timer);\n      ack.apply(this, [null, ...args]);\n    };\n  }\n  /**\n   * Emits an event and waits for an acknowledgement\n   *\n   * @example\n   * // without timeout\n   * const response = await socket.emitWithAck(\"hello\", \"world\");\n   *\n   * // with a specific timeout\n   * try {\n   *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n   * } catch (err) {\n   *   // the server did not acknowledge the event in the given delay\n   * }\n   *\n   * @return a Promise that will be fulfilled when the server acknowledges the event\n   */\n  emitWithAck(ev, ...args) {\n    // the timeout flag is optional\n    const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n    return new Promise((resolve, reject) => {\n      args.push((arg1, arg2) => {\n        if (withErr) {\n          return arg1 ? reject(arg1) : resolve(arg2);\n        } else {\n          return resolve(arg1);\n        }\n      });\n      this.emit(ev, ...args);\n    });\n  }\n  /**\n   * Add the packet to the queue.\n   * @param args\n   * @private\n   */\n  _addToQueue(args) {\n    let ack;\n    if (typeof args[args.length - 1] === \"function\") {\n      ack = args.pop();\n    }\n    const packet = {\n      id: this._queueSeq++,\n      tryCount: 0,\n      pending: false,\n      args,\n      flags: Object.assign({\n        fromQueue: true\n      }, this.flags)\n    };\n    args.push((err, ...responseArgs) => {\n      if (packet !== this._queue[0]) {\n        // the packet has already been acknowledged\n        return;\n      }\n      const hasError = err !== null;\n      if (hasError) {\n        if (packet.tryCount > this._opts.retries) {\n          debug(\"packet [%d] is discarded after %d tries\", packet.id, packet.tryCount);\n          this._queue.shift();\n          if (ack) {\n            ack(err);\n          }\n        }\n      } else {\n        debug(\"packet [%d] was successfully sent\", packet.id);\n        this._queue.shift();\n        if (ack) {\n          ack(null, ...responseArgs);\n        }\n      }\n      packet.pending = false;\n      return this._drainQueue();\n    });\n    this._queue.push(packet);\n    this._drainQueue();\n  }\n  /**\n   * Send the first packet of the queue, and wait for an acknowledgement from the server.\n   * @param force - whether to resend a packet that has not been acknowledged yet\n   *\n   * @private\n   */\n  _drainQueue(force = false) {\n    debug(\"draining queue\");\n    if (!this.connected || this._queue.length === 0) {\n      return;\n    }\n    const packet = this._queue[0];\n    if (packet.pending && !force) {\n      debug(\"packet [%d] has already been sent and is waiting for an ack\", packet.id);\n      return;\n    }\n    packet.pending = true;\n    packet.tryCount++;\n    debug(\"sending packet [%d] (try n°%d)\", packet.id, packet.tryCount);\n    this.flags = packet.flags;\n    this.emit.apply(this, packet.args);\n  }\n  /**\n   * Sends a packet.\n   *\n   * @param packet\n   * @private\n   */\n  packet(packet) {\n    packet.nsp = this.nsp;\n    this.io._packet(packet);\n  }\n  /**\n   * Called upon engine `open`.\n   *\n   * @private\n   */\n  onopen() {\n    debug(\"transport is open - connecting\");\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this._sendConnectPacket(data);\n      });\n    } else {\n      this._sendConnectPacket(this.auth);\n    }\n  }\n  /**\n   * Sends a CONNECT packet to initiate the Socket.IO session.\n   *\n   * @param data\n   * @private\n   */\n  _sendConnectPacket(data) {\n    this.packet({\n      type: socket_io_parser_1.PacketType.CONNECT,\n      data: this._pid ? Object.assign({\n        pid: this._pid,\n        offset: this._lastOffset\n      }, data) : data\n    });\n  }\n  /**\n   * Called upon engine or manager `error`.\n   *\n   * @param err\n   * @private\n   */\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\n   * Called upon engine `close`.\n   *\n   * @param reason\n   * @param description\n   * @private\n   */\n  onclose(reason, description) {\n    debug(\"close (%s)\", reason);\n    this.connected = false;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason, description);\n  }\n  /**\n   * Called with socket packet.\n   *\n   * @param packet\n   * @private\n   */\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n    switch (packet.type) {\n      case socket_io_parser_1.PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          this.onconnect(packet.data.sid, packet.data.pid);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n        break;\n      case socket_io_parser_1.PacketType.EVENT:\n      case socket_io_parser_1.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n      case socket_io_parser_1.PacketType.ACK:\n      case socket_io_parser_1.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n      case socket_io_parser_1.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n      case socket_io_parser_1.PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message);\n        // @ts-ignore\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\n   * Called upon a server event.\n   *\n   * @param packet\n   * @private\n   */\n  onevent(packet) {\n    const args = packet.data || [];\n    debug(\"emitting event %j\", args);\n    if (null != packet.id) {\n      debug(\"attaching ack callback to event\");\n      args.push(this.ack(packet.id));\n    }\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n    super.emit.apply(this, args);\n    if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n      this._lastOffset = args[args.length - 1];\n    }\n  }\n  /**\n   * Produces an ack callback to emit with an event.\n   *\n   * @private\n   */\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function (...args) {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n      debug(\"sending ack %j\", args);\n      self.packet({\n        type: socket_io_parser_1.PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\n   * Called upon a server acknowlegement.\n   *\n   * @param packet\n   * @private\n   */\n  onack(packet) {\n    const ack = this.acks[packet.id];\n    if (\"function\" === typeof ack) {\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {\n      debug(\"bad ack %s\", packet.id);\n    }\n  }\n  /**\n   * Called upon server connect.\n   *\n   * @private\n   */\n  onconnect(id, pid) {\n    debug(\"socket connected with id %s\", id);\n    this.id = id;\n    this.recovered = pid && this._pid === pid;\n    this._pid = pid; // defined only if connection state recovery is enabled\n    this.connected = true;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n    this._drainQueue(true);\n  }\n  /**\n   * Emit buffered events (received and emitted).\n   *\n   * @private\n   */\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => {\n      this.notifyOutgoingListeners(packet);\n      this.packet(packet);\n    });\n    this.sendBuffer = [];\n  }\n  /**\n   * Called upon server disconnect.\n   *\n   * @private\n   */\n  ondisconnect() {\n    debug(\"server disconnect (%s)\", this.nsp);\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\n   * Called upon forced client/server side disconnections,\n   * this method ensures the manager stops tracking us and\n   * that reconnections don't get triggered for this.\n   *\n   * @private\n   */\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n    this.io[\"_destroy\"](this);\n  }\n  /**\n   * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n   *\n   * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"disconnect\", (reason) => {\n   *   // console.log(reason); prints \"io client disconnect\"\n   * });\n   *\n   * socket.disconnect();\n   *\n   * @return self\n   */\n  disconnect() {\n    if (this.connected) {\n      debug(\"performing disconnect (%s)\", this.nsp);\n      this.packet({\n        type: socket_io_parser_1.PacketType.DISCONNECT\n      });\n    }\n    // remove socket from pool\n    this.destroy();\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n    return this;\n  }\n  /**\n   * Alias for {@link disconnect()}.\n   *\n   * @return self\n   */\n  close() {\n    return this.disconnect();\n  }\n  /**\n   * Sets the compress flag.\n   *\n   * @example\n   * socket.compress(false).emit(\"hello\");\n   *\n   * @param compress - if `true`, compresses the sending data\n   * @return self\n   */\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n   * ready to send messages.\n   *\n   * @example\n   * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n   *\n   * @returns self\n   */\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\n   *\n   * @example\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\n   *   if (err) {\n   *     // the server did not acknowledge the event in the given delay\n   *   }\n   * });\n   *\n   * @returns self\n   */\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * @example\n   * socket.onAny((event, ...args) => {\n   *   console.log(`got ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * @example\n   * socket.prependAny((event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n    this._anyListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`got event ${event}`);\n   * }\n   *\n   * socket.onAny(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAny(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAny();\n   *\n   * @param listener\n   */\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.onAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  onAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.push(listener);\n    return this;\n  }\n  /**\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n   * callback. The listener is added to the beginning of the listeners array.\n   *\n   * Note: acknowledgements sent to the server are not included.\n   *\n   * @example\n   * socket.prependAnyOutgoing((event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * });\n   *\n   * @param listener\n   */\n  prependAnyOutgoing(listener) {\n    this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n    this._anyOutgoingListeners.unshift(listener);\n    return this;\n  }\n  /**\n   * Removes the listener that will be fired when any event is emitted.\n   *\n   * @example\n   * const catchAllListener = (event, ...args) => {\n   *   console.log(`sent event ${event}`);\n   * }\n   *\n   * socket.onAnyOutgoing(catchAllListener);\n   *\n   * // remove a specific listener\n   * socket.offAnyOutgoing(catchAllListener);\n   *\n   * // or remove all listeners\n   * socket.offAnyOutgoing();\n   *\n   * @param [listener] - the catch-all listener (optional)\n   */\n  offAnyOutgoing(listener) {\n    if (!this._anyOutgoingListeners) {\n      return this;\n    }\n    if (listener) {\n      const listeners = this._anyOutgoingListeners;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyOutgoingListeners = [];\n    }\n    return this;\n  }\n  /**\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n   * e.g. to remove listeners.\n   */\n  listenersAnyOutgoing() {\n    return this._anyOutgoingListeners || [];\n  }\n  /**\n   * Notify the listeners for each packet sent\n   *\n   * @param packet\n   *\n   * @private\n   */\n  notifyOutgoingListeners(packet) {\n    if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n      const listeners = this._anyOutgoingListeners.slice();\n      for (const listener of listeners) {\n        listener.apply(this, packet.data);\n      }\n    }\n  }\n}\nexports.Socket = Socket;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","on_js_1","component_emitter_1","debug_1","debug","default","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Emitter","constructor","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","disconnected","subEvents","subs","on","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","PacketType","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","notifyOutgoingListeners","push","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","emitWithAck","withErr","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","responseArgs","hasError","shift","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/node_modules/socket.io-client/build/cjs/socket.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Socket = void 0;\nconst socket_io_parser_1 = require(\"socket.io-parser\");\nconst on_js_1 = require(\"./on.js\");\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nclass Socket extends component_emitter_1.Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on_js_1.on(io, \"open\", this.onopen.bind(this)),\n            on_js_1.on(io, \"packet\", this.onpacket.bind(this)),\n            on_js_1.on(io, \"error\", this.onerror.bind(this)),\n            on_js_1.on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: socket_io_parser_1.PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    debug(\"removing packet with ack id %d from the buffer\", id);\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        // the timeout flag is optional\n        const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n        return new Promise((resolve, reject) => {\n            args.push((arg1, arg2) => {\n                if (withErr) {\n                    return arg1 ? reject(arg1) : resolve(arg2);\n                }\n                else {\n                    return resolve(arg1);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    debug(\"packet [%d] is discarded after %d tries\", packet.id, packet.tryCount);\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                debug(\"packet [%d] was successfully sent\", packet.id);\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        debug(\"draining queue\");\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            debug(\"packet [%d] has already been sent and is waiting for an ack\", packet.id);\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        debug(\"sending packet [%d] (try n°%d)\", packet.id, packet.tryCount);\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: socket_io_parser_1.PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case socket_io_parser_1.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser_1.PacketType.EVENT:\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser_1.PacketType.ACK:\n            case socket_io_parser_1.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser_1.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser_1.PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\nexports.Socket = Socket;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}