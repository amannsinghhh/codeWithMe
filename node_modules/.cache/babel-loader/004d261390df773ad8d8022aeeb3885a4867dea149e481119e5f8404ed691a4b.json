{"ast":null,"code":"import React, { useEffect, useState, useRef } from 'react';\nimport { EditorState } from '@codemirror/state';\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view';\nimport { defaultKeymap } from '@codemirror/commands';\nimport { history, historyKeymap } from '@codemirror/history';\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language';\nimport { bracketMatching } from '@codemirror/matchbrackets';\nimport { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter';\nimport { defaultHighlightStyle } from '@codemirror/highlight';\nimport { javascript } from '@codemirror/lang-javascript';\nimport CodeMirror from 'codemirror';\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search';\nimport { basicSetup, minimalSetup } from \"codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete';\nimport { lintKeymap } from '@codemirror/lint';\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view';\nimport { Type } from 'react';\nimport { func } from 'prop-types';\nconst initialText = 'console.log(\"hello, world\")';\nconst targetElement = document.querySelector('#realtimeeditor');\nnew EditorView({\n  parent: targetElement,\n  state: EditorState.create({\n    doc: initialText,\n    extensions: [lineNumbers(), highlightActiveLineGutter(), highlightSpecialChars(), history(), foldGutter(), drawSelection(), dropCursor(), EditorState.allowMultipleSelections.of(true), indentOnInput(), syntaxHighlighting(defaultHighlightStyle, {\n      fallback: true\n    }), bracketMatching(), closeBrackets(), autocompletion(), rectangularSelection(), crosshairCursor(), highlightActiveLine(), highlightSelectionMatches(), keymap.of([...closeBracketsKeymap, ...defaultKeymap, ...searchKeymap, ...historyKeymap, ...foldKeymap, ...completionKeymap, ...lintKeymap]), javascript()]\n  })\n});\nexport default Editor;\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport CodeMirror from 'codemirror'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { basicSetup, minimalSetup } from \"codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nimport { Type } from 'react'\nimport { func } from 'prop-types'\n\nconst initialText = 'console.log(\"hello, world\")'\nconst targetElement = document.querySelector('#realtimeeditor')\nnew EditorView({\n    parent: targetElement,\n    state: EditorState.create({\n        doc: initialText,\n        extensions: [\n            lineNumbers(),\n            highlightActiveLineGutter(),\n            highlightSpecialChars(),\n            history(),\n            foldGutter(),\n            drawSelection(),\n            dropCursor(),\n            EditorState.allowMultipleSelections.of(true),\n            indentOnInput(),\n            syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n            bracketMatching(),\n            closeBrackets(),\n            autocompletion(),\n            rectangularSelection(),\n            crosshairCursor(),\n            highlightActiveLine(),\n            highlightSelectionMatches(),\n            keymap.of([\n                ...closeBracketsKeymap,\n                ...defaultKeymap,\n                ...searchKeymap,\n                ...historyKeymap,\n                ...foldKeymap,\n                ...completionKeymap,\n                ...lintKeymap,\n            ]),\n            javascript(),\n        ],\n    }),\n})\n\n\nexport default Editor\n\n\n\n\n\n/*\nuseEffect(() => {\n        async function init() {\n            let myView = new EditorView(document.getElementById('realtimeeditor'), {\n                doc: \"hello\",\n                extensions: [keymap.of(defaultKeymap)],\n                parent: document.body,\n                mode: { name: 'javascript', json: true },\n                theme: 'dracula',\n                autoCloseTags: true,\n                autoCloseBracket: true,\n                lineNumbers: true,\n            })\n\n        }\n        init();\n    }, []);\n    \n    const Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('realtimeeditor')\n    new EditorView({\n        doc: initialText,\n        extensions: [\n            basicSetup,\n            javascript(),\n        ],\n        parent: targetElement,\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n*/","map":{"version":3,"names":["React","useEffect","useState","useRef","EditorState","EditorView","keymap","highlightActiveLine","defaultKeymap","history","historyKeymap","indentOnInput","foldGutter","foldKeymap","syntaxHighlighting","bracketMatching","lineNumbers","highlightActiveLineGutter","defaultHighlightStyle","javascript","CodeMirror","highlightSelectionMatches","searchKeymap","basicSetup","minimalSetup","autocompletion","closeBrackets","closeBracketsKeymap","completionKeymap","lintKeymap","crosshairCursor","drawSelection","dropCursor","highlightSpecialChars","rectangularSelection","Type","func","initialText","targetElement","document","querySelector","parent","state","create","doc","extensions","allowMultipleSelections","of","fallback","Editor"],"sources":["/Users/amansingh/Desktop/CodeWithMe/codewithme/src/components/Editor.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport CodeMirror from 'codemirror'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { basicSetup, minimalSetup } from \"codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\nimport { Type } from 'react'\nimport { func } from 'prop-types'\nconst initialText = 'console.log(\"hello, world\")'\nconst targetElement = document.querySelector('#realtimeeditor')\nnew EditorView({\n    parent: targetElement,\n    state: EditorState.create({\n        doc: initialText,\n        extensions: [\n            lineNumbers(),\n            highlightActiveLineGutter(),\n            highlightSpecialChars(),\n            history(),\n            foldGutter(),\n            drawSelection(),\n            dropCursor(),\n            EditorState.allowMultipleSelections.of(true),\n            indentOnInput(),\n            syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n            bracketMatching(),\n            closeBrackets(),\n            autocompletion(),\n            rectangularSelection(),\n            crosshairCursor(),\n            highlightActiveLine(),\n            highlightSelectionMatches(),\n            keymap.of([\n                ...closeBracketsKeymap,\n                ...defaultKeymap,\n                ...searchKeymap,\n                ...historyKeymap,\n                ...foldKeymap,\n                ...completionKeymap,\n                ...lintKeymap,\n            ]),\n            javascript(),\n        ],\n    }),\n})\n\n\n\n\nexport default Editor\n\n\n\n\n\n\n\n/* \nimport React, { useEffect, useState, useRef } from 'react'\nimport { EditorState } from '@codemirror/state'\nimport { EditorView, keymap, highlightActiveLine } from '@codemirror/view'\nimport { defaultKeymap } from '@codemirror/commands'\nimport { history, historyKeymap } from '@codemirror/history'\nimport { indentOnInput, foldGutter, foldKeymap, syntaxHighlighting } from '@codemirror/language'\nimport { bracketMatching } from '@codemirror/matchbrackets'\nimport { lineNumbers, highlightActiveLineGutter } from '@codemirror/gutter'\nimport { defaultHighlightStyle } from '@codemirror/highlight'\nimport { javascript } from '@codemirror/lang-javascript'\nimport CodeMirror from 'codemirror'\nimport { highlightSelectionMatches, searchKeymap } from '@codemirror/search'\nimport { basicSetup, minimalSetup } from \"codemirror\";\nimport { autocompletion, closeBrackets, closeBracketsKeymap, completionKeymap } from '@codemirror/autocomplete'\nimport { lintKeymap } from '@codemirror/lint'\nimport { crosshairCursor, drawSelection, dropCursor, highlightSpecialChars, rectangularSelection } from '@codemirror/view'\n\nimport { Type } from 'react'\nimport { func } from 'prop-types'\n\nconst initialText = 'console.log(\"hello, world\")'\nconst targetElement = document.querySelector('#realtimeeditor')\nnew EditorView({\n    parent: targetElement,\n    state: EditorState.create({\n        doc: initialText,\n        extensions: [\n            lineNumbers(),\n            highlightActiveLineGutter(),\n            highlightSpecialChars(),\n            history(),\n            foldGutter(),\n            drawSelection(),\n            dropCursor(),\n            EditorState.allowMultipleSelections.of(true),\n            indentOnInput(),\n            syntaxHighlighting(defaultHighlightStyle, { fallback: true }),\n            bracketMatching(),\n            closeBrackets(),\n            autocompletion(),\n            rectangularSelection(),\n            crosshairCursor(),\n            highlightActiveLine(),\n            highlightSelectionMatches(),\n            keymap.of([\n                ...closeBracketsKeymap,\n                ...defaultKeymap,\n                ...searchKeymap,\n                ...historyKeymap,\n                ...foldKeymap,\n                ...completionKeymap,\n                ...lintKeymap,\n            ]),\n            javascript(),\n        ],\n    }),\n})\n\n\nexport default Editor\n\n\n\n\n\n/*\nuseEffect(() => {\n        async function init() {\n            let myView = new EditorView(document.getElementById('realtimeeditor'), {\n                doc: \"hello\",\n                extensions: [keymap.of(defaultKeymap)],\n                parent: document.body,\n                mode: { name: 'javascript', json: true },\n                theme: 'dracula',\n                autoCloseTags: true,\n                autoCloseBracket: true,\n                lineNumbers: true,\n            })\n\n        }\n        init();\n    }, []);\n    \n    const Editor = () => {\n    const initialText = 'console.log(\"hello, world\")'\n    const targetElement = document.querySelector('realtimeeditor')\n    new EditorView({\n        doc: initialText,\n        extensions: [\n            basicSetup,\n            javascript(),\n        ],\n        parent: targetElement,\n    })\n    return <textarea id='realtimeeditor'></textarea>\n}\n*/"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,UAAU,EAAEC,MAAM,EAAEC,mBAAmB,QAAQ,kBAAkB;AAC1E,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,OAAO,EAAEC,aAAa,QAAQ,qBAAqB;AAC5D,SAASC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,kBAAkB,QAAQ,sBAAsB;AAChG,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,WAAW,EAAEC,yBAAyB,QAAQ,oBAAoB;AAC3E,SAASC,qBAAqB,QAAQ,uBAAuB;AAC7D,SAASC,UAAU,QAAQ,6BAA6B;AACxD,OAAOC,UAAU,MAAM,YAAY;AACnC,SAASC,yBAAyB,EAAEC,YAAY,QAAQ,oBAAoB;AAC5E,SAASC,UAAU,EAAEC,YAAY,QAAQ,YAAY;AACrD,SAASC,cAAc,EAAEC,aAAa,EAAEC,mBAAmB,EAAEC,gBAAgB,QAAQ,0BAA0B;AAC/G,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,eAAe,EAAEC,aAAa,EAAEC,UAAU,EAAEC,qBAAqB,EAAEC,oBAAoB,QAAQ,kBAAkB;AAC1H,SAASC,IAAI,QAAQ,OAAO;AAC5B,SAASC,IAAI,QAAQ,YAAY;AACjC,MAAMC,WAAW,GAAG,6BAA6B;AACjD,MAAMC,aAAa,GAAGC,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;AAC/D,IAAInC,UAAU,CAAC;EACXoC,MAAM,EAAEH,aAAa;EACrBI,KAAK,EAAEtC,WAAW,CAACuC,MAAM,CAAC;IACtBC,GAAG,EAAEP,WAAW;IAChBQ,UAAU,EAAE,CACR7B,WAAW,CAAC,CAAC,EACbC,yBAAyB,CAAC,CAAC,EAC3BgB,qBAAqB,CAAC,CAAC,EACvBxB,OAAO,CAAC,CAAC,EACTG,UAAU,CAAC,CAAC,EACZmB,aAAa,CAAC,CAAC,EACfC,UAAU,CAAC,CAAC,EACZ5B,WAAW,CAAC0C,uBAAuB,CAACC,EAAE,CAAC,IAAI,CAAC,EAC5CpC,aAAa,CAAC,CAAC,EACfG,kBAAkB,CAACI,qBAAqB,EAAE;MAAE8B,QAAQ,EAAE;IAAK,CAAC,CAAC,EAC7DjC,eAAe,CAAC,CAAC,EACjBW,aAAa,CAAC,CAAC,EACfD,cAAc,CAAC,CAAC,EAChBS,oBAAoB,CAAC,CAAC,EACtBJ,eAAe,CAAC,CAAC,EACjBvB,mBAAmB,CAAC,CAAC,EACrBc,yBAAyB,CAAC,CAAC,EAC3Bf,MAAM,CAACyC,EAAE,CAAC,CACN,GAAGpB,mBAAmB,EACtB,GAAGnB,aAAa,EAChB,GAAGc,YAAY,EACf,GAAGZ,aAAa,EAChB,GAAGG,UAAU,EACb,GAAGe,gBAAgB,EACnB,GAAGC,UAAU,CAChB,CAAC,EACFV,UAAU,CAAC,CAAC;EAEpB,CAAC;AACL,CAAC,CAAC;AAKF,eAAe8B,MAAM;;AAQrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}